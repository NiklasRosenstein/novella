{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Novella documentation! Novella is a linear build system for processing data in a temporary directory isolated from the project source code. It is designed for the preprocessing of documentation source code such as Markdown files before they are passed into a static site generator such as Mkdocs or Hugo . Novella in itself provides little domain specific logic, but serves as a framework that Pydoc-Markdown plugs into. Check out the Novella Documentation for more information. Note: Novella is currently a work in progress project and is considered unstable.","title":"Welcome to the Novella documentation!"},{"location":"#welcome-to-the-novella-documentation","text":"Novella is a linear build system for processing data in a temporary directory isolated from the project source code. It is designed for the preprocessing of documentation source code such as Markdown files before they are passed into a static site generator such as Mkdocs or Hugo . Novella in itself provides little domain specific logic, but serves as a framework that Pydoc-Markdown plugs into. Check out the Novella Documentation for more information. Note: Novella is currently a work in progress project and is considered unstable.","title":"Welcome to the Novella documentation!"},{"location":"changelog/","text":"Changelog Unreleased Type Description PR Issues Author Improvement `@shell` tag can now be used inline @NiklasRosenstein 0.1.3 (2022-02-23) Type Description PR Issues Author Fix fix return code when an error is encountered in the pipeline @NiklasRosenstein 0.1.2 (2022-02-22) Type Description PR Issues Author Breaking change rename `MkdocsTemplate.apply_default_config` to `~.apply_config`, make adding of `mkdocs-update-config` action unconditional and allow updating the MkDocs site name seperate from applying the default config @NiklasRosenstein Feature implement automatic detection of Git repository URL and current branch name to inject MkDocs `repo_url` and `edit_uri` settings 1 @NiklasRosenstein Hygiene downgrade minimum pyyaml dependency requirement (`>=4.0`) @NiklasRosenstein 0.1.1 (2022-02-22) Type Description PR Issues Author Feature support `slice_lines` option for `@cat` tag @NiklasRosenstein Docs include Mkdocs default configuration delivered with Novella in `MkdocsApplDefaultAction` docstring @NiklasRosenstein Feature implement `@shell` tag preprocessor @NiklasRosenstein","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"Type Description PR Issues Author Improvement `@shell` tag can now be used inline @NiklasRosenstein","title":"Unreleased"},{"location":"changelog/#013-2022-02-23","text":"Type Description PR Issues Author Fix fix return code when an error is encountered in the pipeline @NiklasRosenstein","title":"0.1.3 (2022-02-23)"},{"location":"changelog/#012-2022-02-22","text":"Type Description PR Issues Author Breaking change rename `MkdocsTemplate.apply_default_config` to `~.apply_config`, make adding of `mkdocs-update-config` action unconditional and allow updating the MkDocs site name seperate from applying the default config @NiklasRosenstein Feature implement automatic detection of Git repository URL and current branch name to inject MkDocs `repo_url` and `edit_uri` settings 1 @NiklasRosenstein Hygiene downgrade minimum pyyaml dependency requirement (`>=4.0`) @NiklasRosenstein","title":"0.1.2 (2022-02-22)"},{"location":"changelog/#011-2022-02-22","text":"Type Description PR Issues Author Feature support `slice_lines` option for `@cat` tag @NiklasRosenstein Docs include Mkdocs default configuration delivered with Novella in `MkdocsApplDefaultAction` docstring @NiklasRosenstein Feature implement `@shell` tag preprocessor @NiklasRosenstein","title":"0.1.1 (2022-02-22)"},{"location":"concepts/","text":"Concepts The Novella build process is described using a build.novella file using the Craftr-Dsl configuration language, which is (almost) a superset of Python. There are three relevant concepts for the configuration that are provided by Novella itself: Options (which are made accessible via the CLI) Actions Templates Options An option is defined using the NovellaContext.option() function and allows you to define a command-line option that is parsed by Novella when running your build script. option \"site_directory\" \"d\" description : \"The directory in which to generate the final HTML.\" default : \"_site\" Actions Actions are plugins that execute some logic when its their turn and are declared using the NovellaContext.do() function. Inside the configuration closure of actions, the NovellaContext.options dictionary can be used to read option values that have been passed via the CLI. As built-in actions, Novella provides the blank , copy-files and run action types. New action types can be defined by registering them under the novella.actions entrypoint. do \"copy-files\" { paths = [ \"content\" , \"mkdocs.yml\" ] } Actions may be named to later retrieve and further configure them using NovellaContext.action() , or to use them as reference point for adding other actions before or after. It is common for templates to create named blank actions, allowing a user after the template was applied to inject actions into the sequence generated by the template. template \"mkdocs\" action \"mkdocs-preprocess\" { # ... } Templates A template is a plugin that takes over definition of the Novella pipeline to avoid some boilerplate in your configuration script. Templates are invoked via the NovellaContext.template() function and can also be configured using \"init\" and \"post\" closures (before the template is executed and after, respectively). Novella itself delivers an mkdocs template out of the box. template \"mkdocs\" { apply_default_config = False }","title":"Concepts"},{"location":"concepts/#concepts","text":"The Novella build process is described using a build.novella file using the Craftr-Dsl configuration language, which is (almost) a superset of Python. There are three relevant concepts for the configuration that are provided by Novella itself: Options (which are made accessible via the CLI) Actions Templates","title":"Concepts"},{"location":"concepts/#options","text":"An option is defined using the NovellaContext.option() function and allows you to define a command-line option that is parsed by Novella when running your build script. option \"site_directory\" \"d\" description : \"The directory in which to generate the final HTML.\" default : \"_site\"","title":"Options"},{"location":"concepts/#actions","text":"Actions are plugins that execute some logic when its their turn and are declared using the NovellaContext.do() function. Inside the configuration closure of actions, the NovellaContext.options dictionary can be used to read option values that have been passed via the CLI. As built-in actions, Novella provides the blank , copy-files and run action types. New action types can be defined by registering them under the novella.actions entrypoint. do \"copy-files\" { paths = [ \"content\" , \"mkdocs.yml\" ] } Actions may be named to later retrieve and further configure them using NovellaContext.action() , or to use them as reference point for adding other actions before or after. It is common for templates to create named blank actions, allowing a user after the template was applied to inject actions into the sequence generated by the template. template \"mkdocs\" action \"mkdocs-preprocess\" { # ... }","title":"Actions"},{"location":"concepts/#templates","text":"A template is a plugin that takes over definition of the Novella pipeline to avoid some boilerplate in your configuration script. Templates are invoked via the NovellaContext.template() function and can also be configured using \"init\" and \"post\" closures (before the template is executed and after, respectively). Novella itself delivers an mkdocs template out of the box. template \"mkdocs\" { apply_default_config = False }","title":"Templates"},{"location":"actions/","text":"Action @pydoc novella.action.Action","title":"Action"},{"location":"actions/#action","text":"@pydoc novella.action.Action","title":"Action"},{"location":"actions/copy_files/","text":"Copy files @pydoc novella.actions.copy_files.CopyFilesAction","title":"Copy files"},{"location":"actions/copy_files/#copy-files","text":"@pydoc novella.actions.copy_files.CopyFilesAction","title":"Copy files"},{"location":"actions/run/","text":"Run @pydoc novella.actions.run.RunAction","title":"Run"},{"location":"actions/run/#run","text":"@pydoc novella.actions.run.RunAction","title":"Run"},{"location":"preprocessing/","text":"Markdown Preprocessing Novella provides some built-in Markdown pre-processing functionality to replace tags with automatically generated content. Tags are either specified as their own block written as @tag <args> or inline as {@tag <args>} . Block tags can span multiple lines if the following lines are indented. Tags may have a TOML configuration following the keyword :with .","title":"Markdown Preprocessing"},{"location":"preprocessing/#markdown-preprocessing","text":"Novella provides some built-in Markdown pre-processing functionality to replace tags with automatically generated content. Tags are either specified as their own block written as @tag <args> or inline as {@tag <args>} . Block tags can span multiple lines if the following lines are indented. Tags may have a TOML configuration following the keyword :with .","title":"Markdown Preprocessing"},{"location":"preprocessing/builtin/","text":"Builtin tags Block tags @anchor This tag can be used to mark a location in a Markdown file with a global identifier that can be linked to using the {@link} inline tag. Depending on the Markdown parser that is targeted, the tag may not be replaced by any content at all but the {@link} tag may instead resolve it from the Markdown header that the tag is placed in front of. Note that the tag does not need to be placed in front of a Markdown header, but if it is not, the anchor name must be set explicitly, otherwise {@link} s to the anchor will render a placeholder name. Arguments @anchor <anchor_id> [<name>] Example @anchor examples # Examples @cat This tag can be used to reference the content of another file relative to the current file in the project directory or relative to the project root (i.e. where the build.novella file is located) using an absolute path. Arguments @cat <file> [:with <toml>] Example @cat ../../../readme.md @cat /../readme.md :with slice_lines = \"3:\" Settings slice_lines (str) \u2013 A slice indicator that is applied to lines in the referenced file. Inline tags @link The {@link} inline tag is used to link to an anchor, potentially from another page. The anchor name is placed as the name of the link, unless overwritten via the settings or the second link argument. Arguments {@link <anchor_id> [<text>]} Example Check out the {@link examples}. Also check out the {@link faq FAQ}.","title":"Builtin tags"},{"location":"preprocessing/builtin/#builtin-tags","text":"","title":"Builtin tags"},{"location":"preprocessing/builtin/#block-tags","text":"","title":"Block tags"},{"location":"preprocessing/builtin/#anchor","text":"This tag can be used to mark a location in a Markdown file with a global identifier that can be linked to using the {@link} inline tag. Depending on the Markdown parser that is targeted, the tag may not be replaced by any content at all but the {@link} tag may instead resolve it from the Markdown header that the tag is placed in front of. Note that the tag does not need to be placed in front of a Markdown header, but if it is not, the anchor name must be set explicitly, otherwise {@link} s to the anchor will render a placeholder name. Arguments @anchor <anchor_id> [<name>] Example @anchor examples # Examples","title":"@anchor"},{"location":"preprocessing/builtin/#cat","text":"This tag can be used to reference the content of another file relative to the current file in the project directory or relative to the project root (i.e. where the build.novella file is located) using an absolute path. Arguments @cat <file> [:with <toml>] Example @cat ../../../readme.md @cat /../readme.md :with slice_lines = \"3:\" Settings slice_lines (str) \u2013 A slice indicator that is applied to lines in the referenced file.","title":"@cat"},{"location":"preprocessing/builtin/#inline-tags","text":"","title":"Inline tags"},{"location":"preprocessing/builtin/#link","text":"The {@link} inline tag is used to link to an anchor, potentially from another page. The anchor name is placed as the name of the link, unless overwritten via the settings or the second link argument. Arguments {@link <anchor_id> [<text>]} Example Check out the {@link examples}. Also check out the {@link faq FAQ}.","title":"@link"},{"location":"templates_/","text":"Template @pydoc novella.template.Template","title":"Template"},{"location":"templates_/#template","text":"@pydoc novella.template.Template","title":"Template"},{"location":"templates_/mkdocs/","text":"Mkdocs @pydoc novella.templates.mkdocs.MkdocsTemplate","title":"Mkdocs"},{"location":"templates_/mkdocs/#mkdocs","text":"@pydoc novella.templates.mkdocs.MkdocsTemplate","title":"Mkdocs"}]}