{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Novella documentation! Novella is a build system for processing files in a temporary directory isolated from the project source code. It is designed for the preprocessing of documentation source code such as Markdown files before they are passed into a static site generator such as Mkdocs or Hugo . Novella was designed as the backbone for Pydoc-Markdown , but can be used independently. Check out the Novella Documentation for more information. Note: Novella is currently a work in progress project and is considered unstable. Introduction The build process is described using a build.novella file using the Craftr-Dsl configuration language, which is (almost) a superset of Python. The novella program executes the script, exposes the options declared within to the command-line interface and executes the pipeline. usage: novella [--version] [-h] [-i TEMPLATE] [-c PATH] [-b PATH] [-r] [--dot] [--intercept ACTION] [--serve] [--site-dir PATH] [--base-url URL] optional arguments: --version show program's version number and exit -h, --help Show this help output. -i TEMPLATE, --init TEMPLATE Create a `build.novella` file initialized from a template. Available templates are: \"mkdocs\", \"hugo\" -c PATH, --config-file PATH The configuration file to load. (default: build.novella) -b PATH, --build-directory PATH The build directory. If not specified, a temporary directory will be created. -r, --use-reloader Enable reloading, which will re-execute the pipeline if a watched file changes. --dot Produce a DotViz representation of the build graph. --intercept ACTION The name of an action to intercept and pause the execution, waiting for user input to continue. Useful for debugging intermediate steps of the build process. Currently, the action name must be matched exactly and actions can only be intercepted before they are run. If this option is provided, all possible intercept points are logged to the console. template (mkdocs): --serve Use mkdocs serve --site-dir PATH Build directory for MkDocs (defaults to \"_site\") --base-url URL The base URL to prefix to autogenerated link inside the documentation. Note The example above is the output for novella -h for the script that generates this documentation. The script argument group contains the options exposed by the build script indirectly through the usage of the mkdocs template.","title":"Home"},{"location":"#welcome-to-the-novella-documentation","text":"Novella is a build system for processing files in a temporary directory isolated from the project source code. It is designed for the preprocessing of documentation source code such as Markdown files before they are passed into a static site generator such as Mkdocs or Hugo . Novella was designed as the backbone for Pydoc-Markdown , but can be used independently. Check out the Novella Documentation for more information. Note: Novella is currently a work in progress project and is considered unstable.","title":"Welcome to the Novella documentation!"},{"location":"#introduction","text":"The build process is described using a build.novella file using the Craftr-Dsl configuration language, which is (almost) a superset of Python. The novella program executes the script, exposes the options declared within to the command-line interface and executes the pipeline. usage: novella [--version] [-h] [-i TEMPLATE] [-c PATH] [-b PATH] [-r] [--dot] [--intercept ACTION] [--serve] [--site-dir PATH] [--base-url URL] optional arguments: --version show program's version number and exit -h, --help Show this help output. -i TEMPLATE, --init TEMPLATE Create a `build.novella` file initialized from a template. Available templates are: \"mkdocs\", \"hugo\" -c PATH, --config-file PATH The configuration file to load. (default: build.novella) -b PATH, --build-directory PATH The build directory. If not specified, a temporary directory will be created. -r, --use-reloader Enable reloading, which will re-execute the pipeline if a watched file changes. --dot Produce a DotViz representation of the build graph. --intercept ACTION The name of an action to intercept and pause the execution, waiting for user input to continue. Useful for debugging intermediate steps of the build process. Currently, the action name must be matched exactly and actions can only be intercepted before they are run. If this option is provided, all possible intercept points are logged to the console. template (mkdocs): --serve Use mkdocs serve --site-dir PATH Build directory for MkDocs (defaults to \"_site\") --base-url URL The base URL to prefix to autogenerated link inside the documentation. Note The example above is the output for novella -h for the script that generates this documentation. The script argument group contains the options exposed by the build script indirectly through the usage of the mkdocs template.","title":"Introduction"},{"location":"changelog/","text":"Changelog 0.1.15 (2022-03-22) Type Description PR Issues Author Improvement Novella markdown tags can now be ended with a trailing `@` (at) to prevent following indented lines to be consumed @NiklasRosenstein Improvement `@shell` tag now supports a `prefix` option @NiklasRosenstein 0.1.14 (2022-03-19) Type Description PR Issues Author Breaking change Changed `Graph.build_edges()` into `Graph.build()` and it now returns a `nr.util.digraph.DiGraph` object instead of modifying its internal graph state @NiklasRosenstein Improvement `Graph.execution_order()` now calls `Graph.build()` everytime, this is to ensure everytime it is called it is up to date @NiklasRosenstein Improvement Action configuration closures are now invoked before the `--dot` argument is handled, allowing modifications to the action dependencies performed in such closures to appear in the DotViz output @NiklasRosenstein Feature `NovellaContext.do()` now accepts a function for the `action` parameter which allows users to implement actions on-the-fly without requiring plugins @NiklasRosenstein 0.1.13 (2022-03-14) Type Description PR Issues Author Feature add `-i,--init TEMPLATE` option to the `novella` CLI @NiklasRosenstein Improvement enable `navigation.sections` by default when using the MkDocs template @NiklasRosenstein 0.1.12 (2022-03-03) Type Description PR Issues Author Fix catch potential `nr.util.git.NoCurrentBranchError` in `novella.repository.detect_repository()` @NiklasRosenstein Improvement add `novella --version` flag @NiklasRosenstein 0.1.11 (2022-03-02) Type Description PR Issues Author Fix `@anchor` now only specifies the URL fragment if the link target is in the same page @NiklasRosenstein Improvement options are now added to their own argument group if registered by a template @NiklasRosenstein Feature add `Action.setup()` which gives it access to the build context @NiklasRosenstein Feature `NovellaContext.action()` now accepts an `Action` instance as well @NiklasRosenstein Improvement `copy-files` action now always ignores files or directories named `.git` @NiklasRosenstein Feature add a basic implementation for a Hugo template (https://gohugo.io/) @NiklasRosenstein Fix fix replacing escaped tags @NiklasRosenstein Feature add `metavar` argument to `NovellaContext.option()` @NiklasRosenstein Feature add `--build-dir` option to MkDocs template 4 @NiklasRosenstein 0.1.10 (2022-03-01) Type Description PR Issues Author Improvement improve replacing escaped Novella tags in `MarkdownPreprocessorAction` @NiklasRosenstein Hygiene `MkdocsTemplate` no longer stores actions it creates a members, you should access them using `NovellaContext.action()` @NiklasRosenstein 0.1.9 (2022-02-28) Type Description PR Issues Author Improvement add `novella.graph` module, `Action` is no a subclass of `novella.graph.Node` @NiklasRosenstein Improvement `NovellaContext.options` now throws an `AssertionError` if accessed before `NovellaContext.configure()` is called @NiklasRosenstein Improvement `MarkdownProcessorAction` now stores processors internally in a graph as well, and `MarkdownProcessor` is now a subclass of `novella.graph.Node`. This allows processors to express dependencies on other processors. @NiklasRosenstein Improvement `@cat` preprocessor now repeats preprocessing on the included content before injecting it @NiklasRosenstein Breaking change remove `AnchorAndLinkRenderer` interface and use `MarkdownFlavor` instead, remove `Link` class and add `always_render_anchor_elements` option to `AnchorTagPreprocessor`. `MarkdownPreprocessorAction` now sets up `@shell`, `@cat` and `@anchor` by default. Add `MarkdownPreprocessor.setup()` @NiklasRosenstein Breaking change `MkdocsTemplate` now keeps the created actions as attributes so they can be configured indivudally @NiklasRosenstein Feature add `NovellaContext.delay()` @NiklasRosenstein Breaking change add `Template.__init__()` @NiklasRosenstein 0.1.8 (2022-02-27) Type Description PR Issues Author Improvement support for Python 3.8+ (before was 3.10) @NiklasRosenstein 0.1.7 (2022-02-27) Type Description PR Issues Author Improvement sluggify anchor HTML ID for the @anchor flavor provided by the `mkdocs` template using `markdown.extensions.toc.slugify()` 3 @NiklasRosenstein Feature add `--intercept` and `--intercept-log` options to CLI @NiklasRosenstein Breaking change Split up responsibilities of `Novella` class between `Novella`, `NovellaContext` and `BuildContext` @NiklasRosenstein Feature add `-r, --use-reloader` option to CLI @NiklasRosenstein Feature add `--dot` option to CLI @NiklasRosenstein Feature add `-c,--config-file` option @NiklasRosenstein Fix fix `-h,--help` when no Novella build script is available in the current directory @NiklasRosenstein Hygiene cleanup build logic @NiklasRosenstein Improvement `@cat` tag registers reference file to be watched for changes @NiklasRosenstein Improvement add `MkdocsUpdateConfigAction.upadte()` and `.update_with()`, update MkDocs config template to add Material features @NiklasRosenstein 0.1.6 (2022-02-24) Type Description PR Issues Author Improvement enable `admonition` extension in MkDocs config template @NiklasRosenstein Feature add `novella.repository` module @NiklasRosenstein 0.1.5 (2022-02-24) Type Description PR Issues Author Improvement `@shell` inline tag strips output @NiklasRosenstein 0.1.4 (2022-02-24) Type Description PR Issues Author Improvement `@shell` tag can now be used inline @NiklasRosenstein 0.1.3 (2022-02-23) Type Description PR Issues Author Fix fix return code when an error is encountered in the pipeline @NiklasRosenstein 0.1.2 (2022-02-22) Type Description PR Issues Author Breaking change rename `MkdocsTemplate.apply_default_config` to `~.apply_config`, make adding of `mkdocs-update-config` action unconditional and allow updating the MkDocs site name seperate from applying the default config @NiklasRosenstein Feature implement automatic detection of Git repository URL and current branch name to inject MkDocs `repo_url` and `edit_uri` settings 1 @NiklasRosenstein Hygiene downgrade minimum pyyaml dependency requirement (`>=4.0`) @NiklasRosenstein 0.1.1 (2022-02-22) Type Description PR Issues Author Feature support `slice_lines` option for `@cat` tag @NiklasRosenstein Docs include Mkdocs default configuration delivered with Novella in `MkdocsApplDefaultAction` docstring @NiklasRosenstein Feature implement `@shell` tag preprocessor @NiklasRosenstein","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#0115-2022-03-22","text":"Type Description PR Issues Author Improvement Novella markdown tags can now be ended with a trailing `@` (at) to prevent following indented lines to be consumed @NiklasRosenstein Improvement `@shell` tag now supports a `prefix` option @NiklasRosenstein","title":"0.1.15 (2022-03-22)"},{"location":"changelog/#0114-2022-03-19","text":"Type Description PR Issues Author Breaking change Changed `Graph.build_edges()` into `Graph.build()` and it now returns a `nr.util.digraph.DiGraph` object instead of modifying its internal graph state @NiklasRosenstein Improvement `Graph.execution_order()` now calls `Graph.build()` everytime, this is to ensure everytime it is called it is up to date @NiklasRosenstein Improvement Action configuration closures are now invoked before the `--dot` argument is handled, allowing modifications to the action dependencies performed in such closures to appear in the DotViz output @NiklasRosenstein Feature `NovellaContext.do()` now accepts a function for the `action` parameter which allows users to implement actions on-the-fly without requiring plugins @NiklasRosenstein","title":"0.1.14 (2022-03-19)"},{"location":"changelog/#0113-2022-03-14","text":"Type Description PR Issues Author Feature add `-i,--init TEMPLATE` option to the `novella` CLI @NiklasRosenstein Improvement enable `navigation.sections` by default when using the MkDocs template @NiklasRosenstein","title":"0.1.13 (2022-03-14)"},{"location":"changelog/#0112-2022-03-03","text":"Type Description PR Issues Author Fix catch potential `nr.util.git.NoCurrentBranchError` in `novella.repository.detect_repository()` @NiklasRosenstein Improvement add `novella --version` flag @NiklasRosenstein","title":"0.1.12 (2022-03-03)"},{"location":"changelog/#0111-2022-03-02","text":"Type Description PR Issues Author Fix `@anchor` now only specifies the URL fragment if the link target is in the same page @NiklasRosenstein Improvement options are now added to their own argument group if registered by a template @NiklasRosenstein Feature add `Action.setup()` which gives it access to the build context @NiklasRosenstein Feature `NovellaContext.action()` now accepts an `Action` instance as well @NiklasRosenstein Improvement `copy-files` action now always ignores files or directories named `.git` @NiklasRosenstein Feature add a basic implementation for a Hugo template (https://gohugo.io/) @NiklasRosenstein Fix fix replacing escaped tags @NiklasRosenstein Feature add `metavar` argument to `NovellaContext.option()` @NiklasRosenstein Feature add `--build-dir` option to MkDocs template 4 @NiklasRosenstein","title":"0.1.11 (2022-03-02)"},{"location":"changelog/#0110-2022-03-01","text":"Type Description PR Issues Author Improvement improve replacing escaped Novella tags in `MarkdownPreprocessorAction` @NiklasRosenstein Hygiene `MkdocsTemplate` no longer stores actions it creates a members, you should access them using `NovellaContext.action()` @NiklasRosenstein","title":"0.1.10 (2022-03-01)"},{"location":"changelog/#019-2022-02-28","text":"Type Description PR Issues Author Improvement add `novella.graph` module, `Action` is no a subclass of `novella.graph.Node` @NiklasRosenstein Improvement `NovellaContext.options` now throws an `AssertionError` if accessed before `NovellaContext.configure()` is called @NiklasRosenstein Improvement `MarkdownProcessorAction` now stores processors internally in a graph as well, and `MarkdownProcessor` is now a subclass of `novella.graph.Node`. This allows processors to express dependencies on other processors. @NiklasRosenstein Improvement `@cat` preprocessor now repeats preprocessing on the included content before injecting it @NiklasRosenstein Breaking change remove `AnchorAndLinkRenderer` interface and use `MarkdownFlavor` instead, remove `Link` class and add `always_render_anchor_elements` option to `AnchorTagPreprocessor`. `MarkdownPreprocessorAction` now sets up `@shell`, `@cat` and `@anchor` by default. Add `MarkdownPreprocessor.setup()` @NiklasRosenstein Breaking change `MkdocsTemplate` now keeps the created actions as attributes so they can be configured indivudally @NiklasRosenstein Feature add `NovellaContext.delay()` @NiklasRosenstein Breaking change add `Template.__init__()` @NiklasRosenstein","title":"0.1.9 (2022-02-28)"},{"location":"changelog/#018-2022-02-27","text":"Type Description PR Issues Author Improvement support for Python 3.8+ (before was 3.10) @NiklasRosenstein","title":"0.1.8 (2022-02-27)"},{"location":"changelog/#017-2022-02-27","text":"Type Description PR Issues Author Improvement sluggify anchor HTML ID for the @anchor flavor provided by the `mkdocs` template using `markdown.extensions.toc.slugify()` 3 @NiklasRosenstein Feature add `--intercept` and `--intercept-log` options to CLI @NiklasRosenstein Breaking change Split up responsibilities of `Novella` class between `Novella`, `NovellaContext` and `BuildContext` @NiklasRosenstein Feature add `-r, --use-reloader` option to CLI @NiklasRosenstein Feature add `--dot` option to CLI @NiklasRosenstein Feature add `-c,--config-file` option @NiklasRosenstein Fix fix `-h,--help` when no Novella build script is available in the current directory @NiklasRosenstein Hygiene cleanup build logic @NiklasRosenstein Improvement `@cat` tag registers reference file to be watched for changes @NiklasRosenstein Improvement add `MkdocsUpdateConfigAction.upadte()` and `.update_with()`, update MkDocs config template to add Material features @NiklasRosenstein","title":"0.1.7 (2022-02-27)"},{"location":"changelog/#016-2022-02-24","text":"Type Description PR Issues Author Improvement enable `admonition` extension in MkDocs config template @NiklasRosenstein Feature add `novella.repository` module @NiklasRosenstein","title":"0.1.6 (2022-02-24)"},{"location":"changelog/#015-2022-02-24","text":"Type Description PR Issues Author Improvement `@shell` inline tag strips output @NiklasRosenstein","title":"0.1.5 (2022-02-24)"},{"location":"changelog/#014-2022-02-24","text":"Type Description PR Issues Author Improvement `@shell` tag can now be used inline @NiklasRosenstein","title":"0.1.4 (2022-02-24)"},{"location":"changelog/#013-2022-02-23","text":"Type Description PR Issues Author Fix fix return code when an error is encountered in the pipeline @NiklasRosenstein","title":"0.1.3 (2022-02-23)"},{"location":"changelog/#012-2022-02-22","text":"Type Description PR Issues Author Breaking change rename `MkdocsTemplate.apply_default_config` to `~.apply_config`, make adding of `mkdocs-update-config` action unconditional and allow updating the MkDocs site name seperate from applying the default config @NiklasRosenstein Feature implement automatic detection of Git repository URL and current branch name to inject MkDocs `repo_url` and `edit_uri` settings 1 @NiklasRosenstein Hygiene downgrade minimum pyyaml dependency requirement (`>=4.0`) @NiklasRosenstein","title":"0.1.2 (2022-02-22)"},{"location":"changelog/#011-2022-02-22","text":"Type Description PR Issues Author Feature support `slice_lines` option for `@cat` tag @NiklasRosenstein Docs include Mkdocs default configuration delivered with Novella in `MkdocsApplDefaultAction` docstring @NiklasRosenstein Feature implement `@shell` tag preprocessor @NiklasRosenstein","title":"0.1.1 (2022-02-22)"},{"location":"concepts/","text":"Concepts There are three relevant concepts for the configuration that are provided by Novella itself: Options Actions Templates Options An option is defined using the NovellaContext.option() function and allows you to define a command-line option that is parsed by Novella when running your build script. option \"site_directory\" \"d\" description : \"The directory in which to generate the final HTML.\" default : \"_site\" Actions Actions are plugins that execute some logic when its their turn and are declared using the NovellaContext.do() function. Inside the configuration closure of actions, the NovellaContext.options dictionary can be used to read option values that have been passed via the CLI. do \"copy-files\" { paths = [ \"content\" , \"mkdocs.yml\" ] } Every action has a name, and by default that name will be the name of the action type ID that is the first argument to the do() method. You can override this name using the name keyword argument. The name can be used to access the action at a later point in the build script using the NovellaContext.action() method. template \"mkdocs\" action \"preprocess-markdown\" { # This action was created by the mkdocs template use \"pydoc\" # Make use of the pydoc preprocessor plugin (note: requires Pydoc-Markdown) } Note New actions can be implemented using the novella.action.Action base class and registering the subclass under the novella.actions entrypoint. Users can also create action logic on-the-fly by passing a closure to the do() method instead of an action ID. The dependencies of the action can be managed from the configuration closure. Actions created this way need to have a name set explicitly. # ... def api_pages = { \"Configuration\" : \"my_package.config\" , \"Client\" : \"my_package.client\" , } # Generate some files in the build directory (here by the variable \"directory\" which is available # through the Novella build context exposed in the action closure). do name : \"generate-api-pages\" closure : { precedes \"preprocess-markdown\" } action : { for title , package in api_pages . items (): def filename = directory / 'content' / 'api' / ( package + '.md' ) filename . parent . mkdir ( parents = True , exist_ok = True ) filename . write_text ( '--- \\n title: {} \\n --- \\n @pydoc {} \\n ' . format ( title , package )) } Templates A template is a plugin that takes over definition of the Novella pipeline to avoid some boilerplate in your configuration script. Templates are invoked via the NovellaContext.template() function and can also be configured using \"init\" and \"post\" closures (before the template is executed and after, respectively). Novella itself delivers an mkdocs template out of the box. template \"mkdocs\" action \"mkdocs-update-config\" { apply_defaults = False } Note New templates can be implemented using the novella.template.Template base class and registering the subclass under the novella.templates entrypoint.","title":"Concepts"},{"location":"concepts/#concepts","text":"There are three relevant concepts for the configuration that are provided by Novella itself: Options Actions Templates","title":"Concepts"},{"location":"concepts/#options","text":"An option is defined using the NovellaContext.option() function and allows you to define a command-line option that is parsed by Novella when running your build script. option \"site_directory\" \"d\" description : \"The directory in which to generate the final HTML.\" default : \"_site\"","title":"Options"},{"location":"concepts/#actions","text":"Actions are plugins that execute some logic when its their turn and are declared using the NovellaContext.do() function. Inside the configuration closure of actions, the NovellaContext.options dictionary can be used to read option values that have been passed via the CLI. do \"copy-files\" { paths = [ \"content\" , \"mkdocs.yml\" ] } Every action has a name, and by default that name will be the name of the action type ID that is the first argument to the do() method. You can override this name using the name keyword argument. The name can be used to access the action at a later point in the build script using the NovellaContext.action() method. template \"mkdocs\" action \"preprocess-markdown\" { # This action was created by the mkdocs template use \"pydoc\" # Make use of the pydoc preprocessor plugin (note: requires Pydoc-Markdown) } Note New actions can be implemented using the novella.action.Action base class and registering the subclass under the novella.actions entrypoint. Users can also create action logic on-the-fly by passing a closure to the do() method instead of an action ID. The dependencies of the action can be managed from the configuration closure. Actions created this way need to have a name set explicitly. # ... def api_pages = { \"Configuration\" : \"my_package.config\" , \"Client\" : \"my_package.client\" , } # Generate some files in the build directory (here by the variable \"directory\" which is available # through the Novella build context exposed in the action closure). do name : \"generate-api-pages\" closure : { precedes \"preprocess-markdown\" } action : { for title , package in api_pages . items (): def filename = directory / 'content' / 'api' / ( package + '.md' ) filename . parent . mkdir ( parents = True , exist_ok = True ) filename . write_text ( '--- \\n title: {} \\n --- \\n @pydoc {} \\n ' . format ( title , package )) }","title":"Actions"},{"location":"concepts/#templates","text":"A template is a plugin that takes over definition of the Novella pipeline to avoid some boilerplate in your configuration script. Templates are invoked via the NovellaContext.template() function and can also be configured using \"init\" and \"post\" closures (before the template is executed and after, respectively). Novella itself delivers an mkdocs template out of the box. template \"mkdocs\" action \"mkdocs-update-config\" { apply_defaults = False } Note New templates can be implemented using the novella.template.Template base class and registering the subclass under the novella.templates entrypoint.","title":"Templates"},{"location":"components/Preprocessors/anchor/","text":"This built-in tag preprocessor provides the @anchor and {@link} tags that can be used to mark locations in a Markdown file and link to them across files. @anchor Arguments @anchor <anchor_id> [<name>] Example @anchor examples # Examples {@link} The {@link} inline tag is used to link to an anchor, potentially from another page. The anchor name is placed as the name of the link, unless overwritten via the settings or the second link argument. Arguments {@link <anchor_id> [<text>]} Example Check out the {@link examples}. Also check out the {@link faq FAQ}.","title":"@anchor and {@link}"},{"location":"components/Preprocessors/anchor/#anchor","text":"Arguments @anchor <anchor_id> [<name>] Example @anchor examples # Examples","title":"@anchor"},{"location":"components/Preprocessors/anchor/#link","text":"The {@link} inline tag is used to link to an anchor, potentially from another page. The anchor name is placed as the name of the link, unless overwritten via the settings or the second link argument. Arguments {@link <anchor_id> [<text>]} Example Check out the {@link examples}. Also check out the {@link faq FAQ}.","title":"{@link}"},{"location":"components/Preprocessors/cat/","text":"@cat This tag can be used to reference the content of another file relative to the current file in the project directory or relative to the project root (i.e. where the build.novella file is located) using an absolute path. Arguments @cat <file> [:with <toml>] Example @cat ../../../readme.md @cat /../readme.md :with slice_lines = \"3:\" Settings slice_lines (str) \u2013 A slice indicator that is applied to lines in the referenced file.","title":"@cat"},{"location":"components/Preprocessors/cat/#cat","text":"This tag can be used to reference the content of another file relative to the current file in the project directory or relative to the project root (i.e. where the build.novella file is located) using an absolute path. Arguments @cat <file> [:with <toml>] Example @cat ../../../readme.md @cat /../readme.md :with slice_lines = \"3:\" Settings slice_lines (str) \u2013 A slice indicator that is applied to lines in the referenced file.","title":"@cat"},{"location":"components/actions/","text":"Action Class Action class Action ( Node [ 'Action' ]) [view_source] Base class for actions that can be embedded in a Novella pipeline. context The instance of the Novella application object that controls the pipeline and lifecycle of the build process. This is set when the action is added to the pipeline and is always available when execute() is called. callsite The callsite at which the action was created. supports_reloading Set to True to indicate that the action supports content reloading while it is running. This is relevant for actions that trigger static site generators serving content that already have automatic reloading capabilities as this will tell Novella to not kill the action and instead rerun the parts of the pipeline that came before it. get_description def get_description () -> str | None [view_source] Return a short text description of the action. It may be shown while the action is running to information the user of what is currently happening. setup def setup ( build : BuildContext ) -> None [view_source] Called before configuration closures when the build context is ready. execute @abc . abstractmethod def execute ( build : BuildContext ) -> None [view_source] Execute the action.","title":"Action"},{"location":"components/actions/#action","text":"","title":"Action"},{"location":"components/actions/#class-action","text":"class Action ( Node [ 'Action' ]) [view_source] Base class for actions that can be embedded in a Novella pipeline.","title":"Class Action"},{"location":"components/actions/#context","text":"The instance of the Novella application object that controls the pipeline and lifecycle of the build process. This is set when the action is added to the pipeline and is always available when execute() is called.","title":"context"},{"location":"components/actions/#callsite","text":"The callsite at which the action was created.","title":"callsite"},{"location":"components/actions/#supports_reloading","text":"Set to True to indicate that the action supports content reloading while it is running. This is relevant for actions that trigger static site generators serving content that already have automatic reloading capabilities as this will tell Novella to not kill the action and instead rerun the parts of the pipeline that came before it.","title":"supports_reloading"},{"location":"components/actions/#get_description","text":"def get_description () -> str | None [view_source] Return a short text description of the action. It may be shown while the action is running to information the user of what is currently happening.","title":"get_description"},{"location":"components/actions/#setup","text":"def setup ( build : BuildContext ) -> None [view_source] Called before configuration closures when the build context is ready.","title":"setup"},{"location":"components/actions/#execute","text":"@abc . abstractmethod def execute ( build : BuildContext ) -> None [view_source] Execute the action.","title":"execute"},{"location":"components/actions/copy_files/","text":"Copy files Class CopyFilesAction class CopyFilesAction ( Action ) [view_source] An action to copy files from the project root to the build directory. This is usually the first step in a pipeline as further steps can then freely modify files in the build directory without affecting the original project directory. This action is registered as an action plugin under the name copy-files . paths The list of paths, relative to the project directory, to copy to the temporary build directory.","title":"Copy files"},{"location":"components/actions/copy_files/#copy-files","text":"","title":"Copy files"},{"location":"components/actions/copy_files/#class-copyfilesaction","text":"class CopyFilesAction ( Action ) [view_source] An action to copy files from the project root to the build directory. This is usually the first step in a pipeline as further steps can then freely modify files in the build directory without affecting the original project directory. This action is registered as an action plugin under the name copy-files .","title":"Class CopyFilesAction"},{"location":"components/actions/copy_files/#paths","text":"The list of paths, relative to the project directory, to copy to the temporary build directory.","title":"paths"},{"location":"components/actions/preprocess_markdown/","text":"Novella provides built-in Markdown preprocessing functionality to replace tags with automatically generated content. Tags are either specified as their own block written as @tag <args> or inline as {@link <args>} . Block tags can span multiple lines if the following lines are indented. Tags may have a TOML configuration following the keyword :with . build.novella do \"preprocess-markdown\" { path = \"content/\" use \"pydoc\" # Requires Pydoc-Markdown (see https://github.com/NiklasRosenstein/pydoc-markdown) } Class MarkdownPreprocessorAction class MarkdownPreprocessorAction ( Action ) [view_source] An action to preprocess Markdown files. All functionality of the processor is implemented by plugins that implement the MarkdownPreprocessor interface. The order of execution of the processors is based on their dependencies, much like when Actions are executed. As a final step, the processor will process escaped inline tags (i.e. replacing {@ with @{ ). path The path to the folder in which markdown files should be preprocessed. If this is not set, all Markdown files in the build directory will be preprocessed. encoding The encoding to read and write files as. use def use ( processor : str | MarkdownPreprocessor , closure : _Closure | None = None , name : str | None = None ) -> None [view_source] Register a processor for use in the plugin. preprocessor def preprocessor ( processor_name : str , closure : _Closure | None = None ) -> MarkdownPreprocessor [view_source] Access or reconfigure a markdown processor that is already registered. repeat def repeat ( path : Path , output_path : Path , content : str , source_path : Path | None = None , last_processor : MarkdownPreprocessor | None = None ) -> str [view_source] Repeat all processors that have been processed so far on the given files. This is used by the @cat preprocessor to apply all preprocessors previously run on the newly included content. This does not include the processor that this method is called from, but only the preprocessors that preceded it. The caller may pass itself to the last_processor argument to include themselves. execute def execute ( build : BuildContext ) -> None [view_source] Execute the preprocessor on all Markdown files specified in path . Class MarkdownPreprocessor class MarkdownPreprocessor ( Node [ 'MarkdownPreprocessor' ]) [view_source] Interface for plugins to process markdown files. ENTRYPOINT The entrypoint under which preprocessor plugins must be registered. setup def setup () -> None [view_source] Called before the execution order of processors is determined. process_files @abc . abstractmethod def process_files ( files : MarkdownFiles ) -> None [view_source] Process the file contents in files .","title":"Preprocess markdown"},{"location":"components/actions/preprocess_markdown/#class-markdownpreprocessoraction","text":"class MarkdownPreprocessorAction ( Action ) [view_source] An action to preprocess Markdown files. All functionality of the processor is implemented by plugins that implement the MarkdownPreprocessor interface. The order of execution of the processors is based on their dependencies, much like when Actions are executed. As a final step, the processor will process escaped inline tags (i.e. replacing {@ with @{ ).","title":"Class MarkdownPreprocessorAction"},{"location":"components/actions/preprocess_markdown/#path","text":"The path to the folder in which markdown files should be preprocessed. If this is not set, all Markdown files in the build directory will be preprocessed.","title":"path"},{"location":"components/actions/preprocess_markdown/#encoding","text":"The encoding to read and write files as.","title":"encoding"},{"location":"components/actions/preprocess_markdown/#use","text":"def use ( processor : str | MarkdownPreprocessor , closure : _Closure | None = None , name : str | None = None ) -> None [view_source] Register a processor for use in the plugin.","title":"use"},{"location":"components/actions/preprocess_markdown/#preprocessor","text":"def preprocessor ( processor_name : str , closure : _Closure | None = None ) -> MarkdownPreprocessor [view_source] Access or reconfigure a markdown processor that is already registered.","title":"preprocessor"},{"location":"components/actions/preprocess_markdown/#repeat","text":"def repeat ( path : Path , output_path : Path , content : str , source_path : Path | None = None , last_processor : MarkdownPreprocessor | None = None ) -> str [view_source] Repeat all processors that have been processed so far on the given files. This is used by the @cat preprocessor to apply all preprocessors previously run on the newly included content. This does not include the processor that this method is called from, but only the preprocessors that preceded it. The caller may pass itself to the last_processor argument to include themselves.","title":"repeat"},{"location":"components/actions/preprocess_markdown/#execute","text":"def execute ( build : BuildContext ) -> None [view_source] Execute the preprocessor on all Markdown files specified in path .","title":"execute"},{"location":"components/actions/preprocess_markdown/#class-markdownpreprocessor","text":"class MarkdownPreprocessor ( Node [ 'MarkdownPreprocessor' ]) [view_source] Interface for plugins to process markdown files.","title":"Class MarkdownPreprocessor"},{"location":"components/actions/preprocess_markdown/#entrypoint","text":"The entrypoint under which preprocessor plugins must be registered.","title":"ENTRYPOINT"},{"location":"components/actions/preprocess_markdown/#setup","text":"def setup () -> None [view_source] Called before the execution order of processors is determined.","title":"setup"},{"location":"components/actions/preprocess_markdown/#process_files","text":"@abc . abstractmethod def process_files ( files : MarkdownFiles ) -> None [view_source] Process the file contents in files .","title":"process_files"},{"location":"components/actions/run/","text":"Run Class RunAction class RunAction ( Action ) [view_source] An action to run a command on the command-line. Often times this will be the last step in a pipeline to kick off some external tool after all pre-processing steps are completed. This action is registered as an action plugin under the name run . args A list of the arguments to run. Only a single command can be run using this action.","title":"Run"},{"location":"components/actions/run/#run","text":"","title":"Run"},{"location":"components/actions/run/#class-runaction","text":"class RunAction ( Action ) [view_source] An action to run a command on the command-line. Often times this will be the last step in a pipeline to kick off some external tool after all pre-processing steps are completed. This action is registered as an action plugin under the name run .","title":"Class RunAction"},{"location":"components/actions/run/#args","text":"A list of the arguments to run. Only a single command can be run using this action.","title":"args"},{"location":"components/templates_/","text":"Template Class Template class Template ( abc . ABC ) [view_source] A template represents a codified sequence of actions that can be further customized, with the intent to reduce the boilerplate of the build.novella file. setup def setup ( context : NovellaContext ) -> None [view_source] Called before the pre closure in {@link pydoc:novella.novella.NovellaContext.template}. define_pipeline def define_pipeline ( context : NovellaContext ) -> None [view_source] Called between the pre and post closure in {@link pydoc:novella.novella.NovellaContext.template}.","title":"Template"},{"location":"components/templates_/#template","text":"","title":"Template"},{"location":"components/templates_/#class-template","text":"class Template ( abc . ABC ) [view_source] A template represents a codified sequence of actions that can be further customized, with the intent to reduce the boilerplate of the build.novella file.","title":"Class Template"},{"location":"components/templates_/#setup","text":"def setup ( context : NovellaContext ) -> None [view_source] Called before the pre closure in {@link pydoc:novella.novella.NovellaContext.template}.","title":"setup"},{"location":"components/templates_/#define_pipeline","text":"def define_pipeline ( context : NovellaContext ) -> None [view_source] Called between the pre and post closure in {@link pydoc:novella.novella.NovellaContext.template}.","title":"define_pipeline"},{"location":"components/templates_/hugo/","text":"Hugo Class HugoTemplate class HugoTemplate ( Template ) [view_source] content_directory The directory that contains the Hugo documentation source code content. Defaults to content/ . hugo_directory The directory that contains all the Hugo content. This directory should contain the content_directory . Defaults to ./ , i.e. the same directory where the Novella build file is located. All files in this directory except for the content_directory will be linked into the build directory. Class InstallHugoAction class InstallHugoAction ( Action ) [view_source] Action to install Hugo into the build directory if it is not available on the system.","title":"Hugo"},{"location":"components/templates_/hugo/#hugo","text":"","title":"Hugo"},{"location":"components/templates_/hugo/#class-hugotemplate","text":"class HugoTemplate ( Template ) [view_source]","title":"Class HugoTemplate"},{"location":"components/templates_/hugo/#content_directory","text":"The directory that contains the Hugo documentation source code content. Defaults to content/ .","title":"content_directory"},{"location":"components/templates_/hugo/#hugo_directory","text":"The directory that contains all the Hugo content. This directory should contain the content_directory . Defaults to ./ , i.e. the same directory where the Novella build file is located. All files in this directory except for the content_directory will be linked into the build directory.","title":"hugo_directory"},{"location":"components/templates_/hugo/#class-installhugoaction","text":"class InstallHugoAction ( Action ) [view_source] Action to install Hugo into the build directory if it is not available on the system.","title":"Class InstallHugoAction"},{"location":"components/templates_/mkdocs/","text":"Mkdocs Class MkdocsTemplate class MkdocsTemplate ( Template ) [view_source] A template to bootstrap an MkDocs build using Novella. It will set up actions to copy files from the content_directory and the mkdocs.yml config relative to the Novella configuration file (if the configuration file exists). This template registers the following options: --serve Use mkdocs serve --site-dir Build directory for MkDocs (defaults to \"_site\") --base-url The base URL to prefix to autogenerated link inside the documentation. This template produces the following actions: copy-files \u2013 A CopyFilesAction that copies the content_directory and the mkdocs.yml (if it exists) to the build directory. mkdocs-update-config \u2013 A MkdocsApplyDefaultAction to create or update the MkDocs configuraton file. preprocess-markdown \u2013 An instance of the MarkdownPreprocessorAction . i. {@link pydoc:novella.markdown.tags.anchor.AnchorTagProcessor.flavor} is set to an {@link pydoc:novella.markdown.flavor.MkDocsFlavor} instance, and the prefix is set to base_url . mkdocs-run \u2013 A RunAction that invokes MkDocs. If the --serve option is provided, the template enables file watching for everything copied by the copy-files action and marks the mkdocs-run as reload-capable, allowing for a seemless live editing experience while using Novella as a preprocessor. Example : template \"mkdocs\" action \"mkdocs-update-config\" { site_name = \"My documentation\" } action \"preprocess-markdown\" { use \"pydoc\" } content_directory The directory that contains the MkDocs context. Defaults to content/ . base_url The base URL at which the documentation will be hosted. Class MkdocsUpdateConfigAction class MkdocsUpdateConfigAction ( Action ) [view_source] An action to update the MkDocs configuration file, or create one if the user did not provide it. The following configuration serves as the default configuration if the user did not provide an MkDocs configuration of their own. If a configuration file is already present, it will be updated such that top-level keys that don't exist in the provided configuration are set to the one present in the default below. To disable this behaviour, set apply_defaults to False . docs_dir : content site_name : My documentation theme : name : material features : - navigation.indexes - navigation.instant - navigation.sections - navigation.tracking - navigation.top - toc.follow markdown_extensions : - admonition - markdown.extensions.extra - meta - pymdownx.betterem - pymdownx.caret - pymdownx.details - pymdownx.highlight - pymdownx.inlinehilite - pymdownx.keys - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tabbed : { alternate_style : true } - pymdownx.tasklist : { custom_checkbox : true } - pymdownx.tilde Check out the the Material for MkDocs // Setup documentation for more information. Other common theme features to enable are toc.integrate and navigation.tabs . apply_defaults Whether to apply the template to the MkDocs configuration (shown above). site_name The MkDocs site_name to inject. Will override an existing site name if not present in the MkDocs configuration. autodetect_repo_url Whether to autodetect the Git repository URL and inject it into the MkDocs configuration. Enabled by default. If the repository URL is already configured, it will do nothing. content_directory The content directory that contains the MkDocs source files. This is used only to construct the edit URI if autodetect_repo_url is enabled. This passed through by the MkdocsTemplate automatically. update def update ( json_path : str , * , add : t . Any = NotSet . Value , set : t . Any = NotSet . Value , do : t . Callable [[ t . Any ], t . Any ] | None = None ) -> None [view_source] A helper function to update a value in the MkDocs configuration by either setting it to the value specified to the set argument or by adding to it (e.g. updating it if it is a dictionary or summing them in case of other values like strings or lists) the value of add . The do operation can also be used to perform an action on the existing value at json_path , but the value must be directly mutated and already exist in the configuration. Note that the json_path argument is treated very simplisticly and does not support wildcards or indexing. The string must begin with $ . Quotes in keys are not supported either. Example template \"mkdocs\" action \"mkdocs-update-config\" { site_name = \"My documentation\" update '$.theme.features' add : [ 'toc.integrate' , 'navigation.tabs' ] update '$.theme.palette' set : { 'primary' : 'black' , 'accent' : 'amber' } } update_with def update_with ( func : t . Callable [[ dict [ str , t . Any ]], t . Any ]) -> None [view_source] Adds a callback that can modify the MkDocs config before it is updated.","title":"Mkdocs"},{"location":"components/templates_/mkdocs/#mkdocs","text":"","title":"Mkdocs"},{"location":"components/templates_/mkdocs/#class-mkdocstemplate","text":"class MkdocsTemplate ( Template ) [view_source] A template to bootstrap an MkDocs build using Novella. It will set up actions to copy files from the content_directory and the mkdocs.yml config relative to the Novella configuration file (if the configuration file exists). This template registers the following options: --serve Use mkdocs serve --site-dir Build directory for MkDocs (defaults to \"_site\") --base-url The base URL to prefix to autogenerated link inside the documentation. This template produces the following actions: copy-files \u2013 A CopyFilesAction that copies the content_directory and the mkdocs.yml (if it exists) to the build directory. mkdocs-update-config \u2013 A MkdocsApplyDefaultAction to create or update the MkDocs configuraton file. preprocess-markdown \u2013 An instance of the MarkdownPreprocessorAction . i. {@link pydoc:novella.markdown.tags.anchor.AnchorTagProcessor.flavor} is set to an {@link pydoc:novella.markdown.flavor.MkDocsFlavor} instance, and the prefix is set to base_url . mkdocs-run \u2013 A RunAction that invokes MkDocs. If the --serve option is provided, the template enables file watching for everything copied by the copy-files action and marks the mkdocs-run as reload-capable, allowing for a seemless live editing experience while using Novella as a preprocessor. Example : template \"mkdocs\" action \"mkdocs-update-config\" { site_name = \"My documentation\" } action \"preprocess-markdown\" { use \"pydoc\" }","title":"Class MkdocsTemplate"},{"location":"components/templates_/mkdocs/#content_directory","text":"The directory that contains the MkDocs context. Defaults to content/ .","title":"content_directory"},{"location":"components/templates_/mkdocs/#base_url","text":"The base URL at which the documentation will be hosted.","title":"base_url"},{"location":"components/templates_/mkdocs/#class-mkdocsupdateconfigaction","text":"class MkdocsUpdateConfigAction ( Action ) [view_source] An action to update the MkDocs configuration file, or create one if the user did not provide it. The following configuration serves as the default configuration if the user did not provide an MkDocs configuration of their own. If a configuration file is already present, it will be updated such that top-level keys that don't exist in the provided configuration are set to the one present in the default below. To disable this behaviour, set apply_defaults to False . docs_dir : content site_name : My documentation theme : name : material features : - navigation.indexes - navigation.instant - navigation.sections - navigation.tracking - navigation.top - toc.follow markdown_extensions : - admonition - markdown.extensions.extra - meta - pymdownx.betterem - pymdownx.caret - pymdownx.details - pymdownx.highlight - pymdownx.inlinehilite - pymdownx.keys - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tabbed : { alternate_style : true } - pymdownx.tasklist : { custom_checkbox : true } - pymdownx.tilde Check out the the Material for MkDocs // Setup documentation for more information. Other common theme features to enable are toc.integrate and navigation.tabs .","title":"Class MkdocsUpdateConfigAction"},{"location":"components/templates_/mkdocs/#apply_defaults","text":"Whether to apply the template to the MkDocs configuration (shown above).","title":"apply_defaults"},{"location":"components/templates_/mkdocs/#site_name","text":"The MkDocs site_name to inject. Will override an existing site name if not present in the MkDocs configuration.","title":"site_name"},{"location":"components/templates_/mkdocs/#autodetect_repo_url","text":"Whether to autodetect the Git repository URL and inject it into the MkDocs configuration. Enabled by default. If the repository URL is already configured, it will do nothing.","title":"autodetect_repo_url"},{"location":"components/templates_/mkdocs/#content_directory_1","text":"The content directory that contains the MkDocs source files. This is used only to construct the edit URI if autodetect_repo_url is enabled. This passed through by the MkdocsTemplate automatically.","title":"content_directory"},{"location":"components/templates_/mkdocs/#update","text":"def update ( json_path : str , * , add : t . Any = NotSet . Value , set : t . Any = NotSet . Value , do : t . Callable [[ t . Any ], t . Any ] | None = None ) -> None [view_source] A helper function to update a value in the MkDocs configuration by either setting it to the value specified to the set argument or by adding to it (e.g. updating it if it is a dictionary or summing them in case of other values like strings or lists) the value of add . The do operation can also be used to perform an action on the existing value at json_path , but the value must be directly mutated and already exist in the configuration. Note that the json_path argument is treated very simplisticly and does not support wildcards or indexing. The string must begin with $ . Quotes in keys are not supported either. Example template \"mkdocs\" action \"mkdocs-update-config\" { site_name = \"My documentation\" update '$.theme.features' add : [ 'toc.integrate' , 'navigation.tabs' ] update '$.theme.palette' set : { 'primary' : 'black' , 'accent' : 'amber' } }","title":"update"},{"location":"components/templates_/mkdocs/#update_with","text":"def update_with ( func : t . Callable [[ dict [ str , t . Any ]], t . Any ]) -> None [view_source] Adds a callback that can modify the MkDocs config before it is updated.","title":"update_with"},{"location":"guides/github/","text":"Using Novella on GitHub This guide is intended to give you a quick introduction on how to build your project documentation using Novella on GitHub using Actions and publish them to Pages. It should also serve as a reference point to quickly get boilerplate configuration for this type of workflow. Project structure Here we are going that you are building documentation for a Python project and that your structure looks similar to the below: .github/ workflows/ python.yml docs/ content/ index.md changelog.md etc.md build.novella requirements.txt # ... Requirements It is convenient to have the requirements for building the documentation in a docs/requirements.txt file as that means your job does not need to rely on another external tool other than Pip to install your tools. docs/requirements.txt mkdocs mkdocs-material novella==1.1.1 GitHub Action Test and build in one job In some cases it is convenient to build the documentation in the same job as where tests are run. But if your Python project needs to be tested with versions of the Python that Novella or other tooling is not compatible with, you need to make sure you install the tooling into an appropriate Python version instead. You can actually run the actions/setup-python@v2 action multiple times in the same job. jobs : test : steps : - uses : actions/checkout@v2 - name : Set up Python 3.10 uses : actions/setup-python@v2 with : { python-version : \"3.10\" } - name : Install tooling run : python -m venv .tooling && .tooling/bin/pip install -r docs/requirements.txt - name : Set up Python ${{ matrix.python-version }} uses : actions/setup-python@v2 with : { python-version : \"${{ matrix.python-version }}\" } - name : Install project run : pip install . # ... - name : Build documentation run : cd docs && ../.tooling/bin/novella # ... Build in a separate job Building the documentation completely isolated from other CI jobs is often preferred. jobs : docs : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - name : Set up Python 3.10 uses : actions/setup-python@v2 with : { python-version : \"3.10\" } - name : Install dependencies run : pip install -r docs/requirements.txt - name : Build documentation run : cd docs && novella # ... Publish the documentation Having a separate job for publishing the docs is nice because it allows you to build the documentation in parallel to other CI jobs such as tests and static type checks, while only publishing it if the tests succeed. For this, upload the documentation output as an artifact in your docs job: jobs : docs : # ... (see above) - uses : actions/upload-artifact@v2 with : name : docs path : docs/_site Then in a new job, publish the documentation: jobs : docs-publish : needs : [ \"test\" , \"docs\" ] runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/download-artifact@v2 with : name : docs path : docs/_site - name : Publish docs uses : JamesIves/github-pages-deploy-action@4.1.4 with : branch : gh-pages folder : docs/_site ssh-key : ${{ secrets.DEPLOY_KEY }}","title":"Using Novella on GitHub"},{"location":"guides/github/#using-novella-on-github","text":"This guide is intended to give you a quick introduction on how to build your project documentation using Novella on GitHub using Actions and publish them to Pages. It should also serve as a reference point to quickly get boilerplate configuration for this type of workflow.","title":"Using Novella on GitHub"},{"location":"guides/github/#project-structure","text":"Here we are going that you are building documentation for a Python project and that your structure looks similar to the below: .github/ workflows/ python.yml docs/ content/ index.md changelog.md etc.md build.novella requirements.txt # ...","title":"Project structure"},{"location":"guides/github/#requirements","text":"It is convenient to have the requirements for building the documentation in a docs/requirements.txt file as that means your job does not need to rely on another external tool other than Pip to install your tools. docs/requirements.txt mkdocs mkdocs-material novella==1.1.1","title":"Requirements"},{"location":"guides/github/#github-action","text":"","title":"GitHub Action"},{"location":"guides/github/#test-and-build-in-one-job","text":"In some cases it is convenient to build the documentation in the same job as where tests are run. But if your Python project needs to be tested with versions of the Python that Novella or other tooling is not compatible with, you need to make sure you install the tooling into an appropriate Python version instead. You can actually run the actions/setup-python@v2 action multiple times in the same job. jobs : test : steps : - uses : actions/checkout@v2 - name : Set up Python 3.10 uses : actions/setup-python@v2 with : { python-version : \"3.10\" } - name : Install tooling run : python -m venv .tooling && .tooling/bin/pip install -r docs/requirements.txt - name : Set up Python ${{ matrix.python-version }} uses : actions/setup-python@v2 with : { python-version : \"${{ matrix.python-version }}\" } - name : Install project run : pip install . # ... - name : Build documentation run : cd docs && ../.tooling/bin/novella # ...","title":"Test and build in one job"},{"location":"guides/github/#build-in-a-separate-job","text":"Building the documentation completely isolated from other CI jobs is often preferred. jobs : docs : runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - name : Set up Python 3.10 uses : actions/setup-python@v2 with : { python-version : \"3.10\" } - name : Install dependencies run : pip install -r docs/requirements.txt - name : Build documentation run : cd docs && novella # ...","title":"Build in a separate job"},{"location":"guides/github/#publish-the-documentation","text":"Having a separate job for publishing the docs is nice because it allows you to build the documentation in parallel to other CI jobs such as tests and static type checks, while only publishing it if the tests succeed. For this, upload the documentation output as an artifact in your docs job: jobs : docs : # ... (see above) - uses : actions/upload-artifact@v2 with : name : docs path : docs/_site Then in a new job, publish the documentation: jobs : docs-publish : needs : [ \"test\" , \"docs\" ] runs-on : ubuntu-latest steps : - uses : actions/checkout@v2 - uses : actions/download-artifact@v2 with : name : docs path : docs/_site - name : Publish docs uses : JamesIves/github-pages-deploy-action@4.1.4 with : branch : gh-pages folder : docs/_site ssh-key : ${{ secrets.DEPLOY_KEY }}","title":"Publish the documentation"}]}