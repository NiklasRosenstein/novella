{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Novella documentation! Novella is a build system for processing files in a temporary directory isolated from the project source code. It is designed for the preprocessing of documentation source code such as Markdown files before they are passed into a static site generator such as Mkdocs or Hugo . Novella was designed as the backbone for Pydoc-Markdown , but can be used independently. Introduction The build process is described using a build.novella file using the Craftr-Dsl configuration language, which is (almost) a superset of Python. The novella program executes the script, exposes the options declared within to the command-line interface and executes the pipeline. usage: novella [-h] [-c PATH] [-b PATH] [-r] [--dot] [--intercept ACTION] [--serve] [--site-dir SITE_DIR] options: -h, --help Show this help output. -c PATH, --config-file PATH The configuration file to load. (default: build.novella) -b PATH, --build-directory PATH The build directory. If not specified, a temporary directory will be created. -r, --use-reloader Enable reloading, which will re-execute the pipeline if a watched file changes. --dot Produce a DotViz representation of the build graph. --intercept ACTION The name of an action to intercept and pause the execution, waiting for user input to continue. Useful for debugging intermediate steps of the build process. Currently, the action name must be matched exactly and actions can only be intercepted before they are run. If this option is provided, all possible intercept points are logged to the console. script: --serve Use mkdocs serve --site-dir SITE_DIR, -d SITE_DIR Build directory for MkDocs (defaults to \"_site\") Note The example above is the output for novella -h for the script that generates this documentation. The script argument group contains the options exposed by the build script indirectly through the usage of the mkdocs template.","title":"Home"},{"location":"#welcome-to-the-novella-documentation","text":"Novella is a build system for processing files in a temporary directory isolated from the project source code. It is designed for the preprocessing of documentation source code such as Markdown files before they are passed into a static site generator such as Mkdocs or Hugo . Novella was designed as the backbone for Pydoc-Markdown , but can be used independently.","title":"Welcome to the Novella documentation!"},{"location":"#introduction","text":"The build process is described using a build.novella file using the Craftr-Dsl configuration language, which is (almost) a superset of Python. The novella program executes the script, exposes the options declared within to the command-line interface and executes the pipeline. usage: novella [-h] [-c PATH] [-b PATH] [-r] [--dot] [--intercept ACTION] [--serve] [--site-dir SITE_DIR] options: -h, --help Show this help output. -c PATH, --config-file PATH The configuration file to load. (default: build.novella) -b PATH, --build-directory PATH The build directory. If not specified, a temporary directory will be created. -r, --use-reloader Enable reloading, which will re-execute the pipeline if a watched file changes. --dot Produce a DotViz representation of the build graph. --intercept ACTION The name of an action to intercept and pause the execution, waiting for user input to continue. Useful for debugging intermediate steps of the build process. Currently, the action name must be matched exactly and actions can only be intercepted before they are run. If this option is provided, all possible intercept points are logged to the console. script: --serve Use mkdocs serve --site-dir SITE_DIR, -d SITE_DIR Build directory for MkDocs (defaults to \"_site\") Note The example above is the output for novella -h for the script that generates this documentation. The script argument group contains the options exposed by the build script indirectly through the usage of the mkdocs template.","title":"Introduction"},{"location":"changelog/","text":"Changelog Unreleased Type Description PR Issues Author Improvement support for Python 3.8+ (before was 3.10) @NiklasRosenstein 0.1.7 (2022-02-27) Type Description PR Issues Author Improvement sluggify anchor HTML ID for the @anchor flavor provided by the `mkdocs` template using `markdown.extensions.toc.slugify()` 3 @NiklasRosenstein Feature add `--intercept` and `--intercept-log` options to CLI @NiklasRosenstein Breaking change Split up responsibilities of `Novella` class between `Novella`, `NovellaContext` and `BuildContext` @NiklasRosenstein Feature add `-r, --use-reloader` option to CLI @NiklasRosenstein Feature add `--dot` option to CLI @NiklasRosenstein Feature add `-c,--config-file` option @NiklasRosenstein Fix fix `-h,--help` when no Novella build script is available in the current directory @NiklasRosenstein Hygiene cleanup build logic @NiklasRosenstein Improvement `@cat` tag registers reference file to be watched for changes @NiklasRosenstein Improvement add `MkdocsUpdateConfigAction.upadte()` and `.update_with()`, update MkDocs config template to add Material features @NiklasRosenstein 0.1.6 (2022-02-24) Type Description PR Issues Author Improvement enable `admonition` extension in MkDocs config template @NiklasRosenstein Feature add `novella.repository` module @NiklasRosenstein 0.1.5 (2022-02-24) Type Description PR Issues Author Improvement `@shell` inline tag strips output @NiklasRosenstein 0.1.4 (2022-02-24) Type Description PR Issues Author Improvement `@shell` tag can now be used inline @NiklasRosenstein 0.1.3 (2022-02-23) Type Description PR Issues Author Fix fix return code when an error is encountered in the pipeline @NiklasRosenstein 0.1.2 (2022-02-22) Type Description PR Issues Author Breaking change rename `MkdocsTemplate.apply_default_config` to `~.apply_config`, make adding of `mkdocs-update-config` action unconditional and allow updating the MkDocs site name seperate from applying the default config @NiklasRosenstein Feature implement automatic detection of Git repository URL and current branch name to inject MkDocs `repo_url` and `edit_uri` settings 1 @NiklasRosenstein Hygiene downgrade minimum pyyaml dependency requirement (`>=4.0`) @NiklasRosenstein 0.1.1 (2022-02-22) Type Description PR Issues Author Feature support `slice_lines` option for `@cat` tag @NiklasRosenstein Docs include Mkdocs default configuration delivered with Novella in `MkdocsApplDefaultAction` docstring @NiklasRosenstein Feature implement `@shell` tag preprocessor @NiklasRosenstein","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#unreleased","text":"Type Description PR Issues Author Improvement support for Python 3.8+ (before was 3.10) @NiklasRosenstein","title":"Unreleased"},{"location":"changelog/#017-2022-02-27","text":"Type Description PR Issues Author Improvement sluggify anchor HTML ID for the @anchor flavor provided by the `mkdocs` template using `markdown.extensions.toc.slugify()` 3 @NiklasRosenstein Feature add `--intercept` and `--intercept-log` options to CLI @NiklasRosenstein Breaking change Split up responsibilities of `Novella` class between `Novella`, `NovellaContext` and `BuildContext` @NiklasRosenstein Feature add `-r, --use-reloader` option to CLI @NiklasRosenstein Feature add `--dot` option to CLI @NiklasRosenstein Feature add `-c,--config-file` option @NiklasRosenstein Fix fix `-h,--help` when no Novella build script is available in the current directory @NiklasRosenstein Hygiene cleanup build logic @NiklasRosenstein Improvement `@cat` tag registers reference file to be watched for changes @NiklasRosenstein Improvement add `MkdocsUpdateConfigAction.upadte()` and `.update_with()`, update MkDocs config template to add Material features @NiklasRosenstein","title":"0.1.7 (2022-02-27)"},{"location":"changelog/#016-2022-02-24","text":"Type Description PR Issues Author Improvement enable `admonition` extension in MkDocs config template @NiklasRosenstein Feature add `novella.repository` module @NiklasRosenstein","title":"0.1.6 (2022-02-24)"},{"location":"changelog/#015-2022-02-24","text":"Type Description PR Issues Author Improvement `@shell` inline tag strips output @NiklasRosenstein","title":"0.1.5 (2022-02-24)"},{"location":"changelog/#014-2022-02-24","text":"Type Description PR Issues Author Improvement `@shell` tag can now be used inline @NiklasRosenstein","title":"0.1.4 (2022-02-24)"},{"location":"changelog/#013-2022-02-23","text":"Type Description PR Issues Author Fix fix return code when an error is encountered in the pipeline @NiklasRosenstein","title":"0.1.3 (2022-02-23)"},{"location":"changelog/#012-2022-02-22","text":"Type Description PR Issues Author Breaking change rename `MkdocsTemplate.apply_default_config` to `~.apply_config`, make adding of `mkdocs-update-config` action unconditional and allow updating the MkDocs site name seperate from applying the default config @NiklasRosenstein Feature implement automatic detection of Git repository URL and current branch name to inject MkDocs `repo_url` and `edit_uri` settings 1 @NiklasRosenstein Hygiene downgrade minimum pyyaml dependency requirement (`>=4.0`) @NiklasRosenstein","title":"0.1.2 (2022-02-22)"},{"location":"changelog/#011-2022-02-22","text":"Type Description PR Issues Author Feature support `slice_lines` option for `@cat` tag @NiklasRosenstein Docs include Mkdocs default configuration delivered with Novella in `MkdocsApplDefaultAction` docstring @NiklasRosenstein Feature implement `@shell` tag preprocessor @NiklasRosenstein","title":"0.1.1 (2022-02-22)"},{"location":"concepts/","text":"Concepts There are three relevant concepts for the configuration that are provided by Novella itself: Options Actions Templates Options An option is defined using the NovellaContext.option() function and allows you to define a command-line option that is parsed by Novella when running your build script. option \"site_directory\" \"d\" description : \"The directory in which to generate the final HTML.\" default : \"_site\" Actions Actions are plugins that execute some logic when its their turn and are declared using the NovellaContext.do() function. Inside the configuration closure of actions, the NovellaContext.options dictionary can be used to read option values that have been passed via the CLI. do \"copy-files\" { paths = [ \"content\" , \"mkdocs.yml\" ] } Actions may be named to later retrieve and further configure them using NovellaContext.action() , or to use them as reference point for adding other actions before or after. It is common for templates to create named blank actions, allowing a user after the template was applied to inject actions into the sequence generated by the template. template \"mkdocs\" action \"mkdocs-preprocess\" { # ... } Note New actions can be implemented using the novella.action.Action base class and registering the subclass under the novella.actions entrypoint. Templates A template is a plugin that takes over definition of the Novella pipeline to avoid some boilerplate in your configuration script. Templates are invoked via the NovellaContext.template() function and can also be configured using \"init\" and \"post\" closures (before the template is executed and after, respectively). Novella itself delivers an mkdocs template out of the box. template \"mkdocs\" { apply_default_config = False } Note New templates can be implemented using the novella.template.Template base class and registering the subclass under the novella.templates entrypoint.","title":"Concepts"},{"location":"concepts/#concepts","text":"There are three relevant concepts for the configuration that are provided by Novella itself: Options Actions Templates","title":"Concepts"},{"location":"concepts/#options","text":"An option is defined using the NovellaContext.option() function and allows you to define a command-line option that is parsed by Novella when running your build script. option \"site_directory\" \"d\" description : \"The directory in which to generate the final HTML.\" default : \"_site\"","title":"Options"},{"location":"concepts/#actions","text":"Actions are plugins that execute some logic when its their turn and are declared using the NovellaContext.do() function. Inside the configuration closure of actions, the NovellaContext.options dictionary can be used to read option values that have been passed via the CLI. do \"copy-files\" { paths = [ \"content\" , \"mkdocs.yml\" ] } Actions may be named to later retrieve and further configure them using NovellaContext.action() , or to use them as reference point for adding other actions before or after. It is common for templates to create named blank actions, allowing a user after the template was applied to inject actions into the sequence generated by the template. template \"mkdocs\" action \"mkdocs-preprocess\" { # ... } Note New actions can be implemented using the novella.action.Action base class and registering the subclass under the novella.actions entrypoint.","title":"Actions"},{"location":"concepts/#templates","text":"A template is a plugin that takes over definition of the Novella pipeline to avoid some boilerplate in your configuration script. Templates are invoked via the NovellaContext.template() function and can also be configured using \"init\" and \"post\" closures (before the template is executed and after, respectively). Novella itself delivers an mkdocs template out of the box. template \"mkdocs\" { apply_default_config = False } Note New templates can be implemented using the novella.template.Template base class and registering the subclass under the novella.templates entrypoint.","title":"Templates"},{"location":"components/actions/","text":"Action @pydoc novella.action.Action","title":"Action"},{"location":"components/actions/#action","text":"@pydoc novella.action.Action","title":"Action"},{"location":"components/actions/copy_files/","text":"Copy files @pydoc novella.actions.copy_files.CopyFilesAction","title":"Copy files"},{"location":"components/actions/copy_files/#copy-files","text":"@pydoc novella.actions.copy_files.CopyFilesAction","title":"Copy files"},{"location":"components/actions/run/","text":"Run @pydoc novella.actions.run.RunAction","title":"Run"},{"location":"components/actions/run/#run","text":"@pydoc novella.actions.run.RunAction","title":"Run"},{"location":"components/preprocessing/","text":"Markdown Preprocessing Novella provides some built-in Markdown pre-processing functionality to replace tags with automatically generated content. Tags are either specified as their own block written as @tag <args> or inline as {@tag <args>} . Block tags can span multiple lines if the following lines are indented. Tags may have a TOML configuration following the keyword :with .","title":"Markdown Preprocessing"},{"location":"components/preprocessing/#markdown-preprocessing","text":"Novella provides some built-in Markdown pre-processing functionality to replace tags with automatically generated content. Tags are either specified as their own block written as @tag <args> or inline as {@tag <args>} . Block tags can span multiple lines if the following lines are indented. Tags may have a TOML configuration following the keyword :with .","title":"Markdown Preprocessing"},{"location":"components/preprocessing/builtin/","text":"Builtin tags Block tags @anchor This tag can be used to mark a location in a Markdown file with a global identifier that can be linked to using the {@link} inline tag. Depending on the Markdown parser that is targeted, the tag may not be replaced by any content at all but the {@link} tag may instead resolve it from the Markdown header that the tag is placed in front of. Note that the tag does not need to be placed in front of a Markdown header, but if it is not, the anchor name must be set explicitly, otherwise {@link} s to the anchor will render a placeholder name. Arguments @anchor <anchor_id> [<name>] Example @anchor examples # Examples @cat This tag can be used to reference the content of another file relative to the current file in the project directory or relative to the project root (i.e. where the build.novella file is located) using an absolute path. Arguments @cat <file> [:with <toml>] Example @cat ../../../readme.md @cat /../readme.md :with slice_lines = \"3:\" Settings slice_lines (str) \u2013 A slice indicator that is applied to lines in the referenced file. Inline tags @link The {@link} inline tag is used to link to an anchor, potentially from another page. The anchor name is placed as the name of the link, unless overwritten via the settings or the second link argument. Arguments {@link <anchor_id> [<text>]} Example Check out the {@link examples}. Also check out the {@link faq FAQ}.","title":"Builtin tags"},{"location":"components/preprocessing/builtin/#builtin-tags","text":"","title":"Builtin tags"},{"location":"components/preprocessing/builtin/#block-tags","text":"","title":"Block tags"},{"location":"components/preprocessing/builtin/#anchor","text":"This tag can be used to mark a location in a Markdown file with a global identifier that can be linked to using the {@link} inline tag. Depending on the Markdown parser that is targeted, the tag may not be replaced by any content at all but the {@link} tag may instead resolve it from the Markdown header that the tag is placed in front of. Note that the tag does not need to be placed in front of a Markdown header, but if it is not, the anchor name must be set explicitly, otherwise {@link} s to the anchor will render a placeholder name. Arguments @anchor <anchor_id> [<name>] Example @anchor examples # Examples","title":"@anchor"},{"location":"components/preprocessing/builtin/#cat","text":"This tag can be used to reference the content of another file relative to the current file in the project directory or relative to the project root (i.e. where the build.novella file is located) using an absolute path. Arguments @cat <file> [:with <toml>] Example @cat ../../../readme.md @cat /../readme.md :with slice_lines = \"3:\" Settings slice_lines (str) \u2013 A slice indicator that is applied to lines in the referenced file.","title":"@cat"},{"location":"components/preprocessing/builtin/#inline-tags","text":"","title":"Inline tags"},{"location":"components/preprocessing/builtin/#link","text":"The {@link} inline tag is used to link to an anchor, potentially from another page. The anchor name is placed as the name of the link, unless overwritten via the settings or the second link argument. Arguments {@link <anchor_id> [<text>]} Example Check out the {@link examples}. Also check out the {@link faq FAQ}.","title":"@link"},{"location":"components/templates_/","text":"Template @pydoc novella.template.Template","title":"Template"},{"location":"components/templates_/#template","text":"@pydoc novella.template.Template","title":"Template"},{"location":"components/templates_/mkdocs/","text":"Mkdocs @pydoc novella.templates.mkdocs.MkdocsTemplate","title":"Mkdocs"},{"location":"components/templates_/mkdocs/#mkdocs","text":"@pydoc novella.templates.mkdocs.MkdocsTemplate","title":"Mkdocs"}]}