{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-novella-documentation","title":"Welcome to the Novella documentation!","text":"<p>Novella is a build system for processing files in a temporary directory isolated from the project source code. It is designed for the preprocessing of documentation source code such as Markdown files before they are passed into a static site generator such as Mkdocs or Hugo. Novella was designed as the backbone for Pydoc-Markdown, but can be used independently.</p> <p>Check out the Novella Documentation for more information.</p> <p>Note: Novella is currently a work in progress project and is considered unstable.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>The build process is described using a <code>build.novella</code> file using the Craftr-Dsl configuration language, which is (almost) a superset of Python. The <code>novella</code> program executes the script, exposes the options declared within to the command-line interface and executes the pipeline.</p> <pre><code>usage: novella [--version] [-h] [-i TEMPLATE] [-c PATH] [-d DIRECTORY]\n               [-b PATH] [-r] [--dot] [--intercept ACTION] [--serve]\n               [--port PORT] [--site-dir PATH] [--base-url URL]\n\noptions:\n  --version             show program's version number and exit\n  -h, --help            Show this help output.\n  -i TEMPLATE, --init TEMPLATE\n                        Create a `build.novella` file initialized from a\n                        template. Available templates are: \"mkdocs\", \"hugo\"\n  -c PATH, --config-file PATH\n                        The configuration file to load. Can be a\n                        pyproject.toml in which case the code is looked up\n                        under the tool.novella.script key. (default: None)\n  -d DIRECTORY, --directory DIRECTORY\n                        Switch to the specified directory before executing the\n                        configuration file.\n  -b PATH, --build-directory PATH\n                        The build directory. If not specified, a temporary\n                        directory will be created.\n  -r, --use-reloader    Enable reloading, which will re-execute the pipeline\n                        if a watched file changes.\n  --dot                 Produce a DotViz representation of the build graph.\n  --intercept ACTION    The name of an action to intercept and pause the\n                        execution, waiting for user input to continue. Useful\n                        for debugging intermediate steps of the build process.\n                        Currently, the action name must be matched exactly and\n                        actions can only be intercepted before they are run.\n                        If this option is provided, all possible intercept\n                        points are logged to the console.\n\ntemplate (mkdocs):\n  --serve               Use mkdocs serve\n  --port PORT           The port to serve under\n  --site-dir PATH       Build directory for MkDocs (defaults to \"_site\")\n  --base-url URL        The base URL to prefix to autogenerated link inside\n                        the documentation.\n</code></pre> <p>Note</p> <p>The example above is the output for <code>novella -h</code> for the script that generates this documentation. The <code>script</code> argument group contains the options exposed by the build script indirectly through the usage of the <code>mkdocs</code> template.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#025-2023-03-11","title":"0.2.5 (2023-03-11)","text":"TypeDescriptionPRIssuesAuthor Feature  Add `--port` option to Mkdocs and Hugo template@NiklasRosenstein Improvement  Rename `--server` option to `--serve` in Hugo template for consistency (the `--server` option is deprecated but still usable).@NiklasRosenstein"},{"location":"changelog/#024-2023-03-10","title":"0.2.4 (2023-03-10)","text":"TypeDescriptionPRIssuesAuthor Fix  Fixed a bug where the `content_directory` set on the `mkdocs-update-config` action did not propagate into the `mkdocs.yml` file.@NiklasRosenstein Fix  Fixed a bug where a file-system event triggering on file-open would continuously retrigger the Novella serving pipeline.@NiklasRosenstein Fix  Fixed a bug with the mainloop that had the `BuildContext` uninitialized through action configuration and `NameError`s in the Hugo template logic.@NiklasRosenstein Improvement  Use already installed Hugo version if available.@NiklasRosenstein Feature  add `--drafts` option to Hugo template@NiklasRosenstein"},{"location":"changelog/#023-2022-03-31","title":"0.2.3 (2022-03-31)","text":"TypeDescriptionPRIssuesAuthor Feature  Add `rename_section_to` option to `@cat` tag@NiklasRosenstein"},{"location":"changelog/#022-2022-03-31","title":"0.2.2 (2022-03-31)","text":"TypeDescriptionPRIssuesAuthor Fix  The `@cat` tag now adds `../` to the path to an image file of which the reference was replaced if the name of the current file being preprocessed is not `index.md`@NiklasRosenstein Feature  Add `markdown_section` option to `@cat` tag, allowing you to inject a portion of another Markdown file@NiklasRosenstein"},{"location":"changelog/#021-2022-03-30","title":"0.2.1 (2022-03-30)","text":"TypeDescriptionPRIssuesAuthor Improvement  The `@cat` tag now copies image files referenced in the source file into the `MarkdownPreprocessor.path / \"img\"` directory if needed and adjust the image reference to ensure that it points to the right file2@NiklasRosenstein"},{"location":"changelog/#020-2022-03-26","title":"0.2.0 (2022-03-26)","text":"TypeDescriptionPRIssuesAuthor Feature  add `MkdocsConfigUpdateAction.profile` option and the `readthedocs` profile in addition to the default `material` profile@NiklasRosenstein Fix  Fix error when path that does not exist is passed to `NovellaBuilder.watch()`@NiklasRosenstein Improvement  Pause process currently running through a `RunAction` if it supports internal reloading while the pipeline is being re-executed@NiklasRosenstein Improvement  reloads triggered by filesystem events are now handled in a separate thread to make sure that the event handling is not blocked@NiklasRosenstein Feature  add `-d,--directory` option to cli@NiklasRosenstein Feature  support reading build script from `pyproject.toml` under the `tool.novella.script` option, as well as the `-d,--directory` flag from `tool.novella.directory` if the option is not given on the CLI (discussion at https://github.com/NiklasRosenstein/pydoc-markdown/discussions/254)@NiklasRosenstein"},{"location":"changelog/#0115-2022-03-22","title":"0.1.15 (2022-03-22)","text":"TypeDescriptionPRIssuesAuthor Improvement  Novella markdown tags can now be ended with a trailing `@` (at) to prevent following indented lines to be consumed@NiklasRosenstein Improvement  `@shell` tag now supports a `prefix` option@NiklasRosenstein"},{"location":"changelog/#0114-2022-03-19","title":"0.1.14 (2022-03-19)","text":"TypeDescriptionPRIssuesAuthor Breaking change  Changed `Graph.build_edges()` into `Graph.build()` and it now returns a `nr.util.digraph.DiGraph` object instead of modifying its internal graph state@NiklasRosenstein Improvement  `Graph.execution_order()` now calls `Graph.build()` everytime, this is to ensure everytime it is called it is up to date@NiklasRosenstein Improvement  Action configuration closures are now invoked before the `--dot` argument is handled, allowing modifications to the action dependencies performed in such closures to appear in the DotViz output@NiklasRosenstein Feature  `NovellaContext.do()` now accepts a function for the `action` parameter which allows users to implement actions on-the-fly without requiring plugins@NiklasRosenstein"},{"location":"changelog/#0113-2022-03-14","title":"0.1.13 (2022-03-14)","text":"TypeDescriptionPRIssuesAuthor Feature  add `-i,--init TEMPLATE` option to the `novella` CLI@NiklasRosenstein Improvement  enable `navigation.sections` by default when using the MkDocs template@NiklasRosenstein"},{"location":"changelog/#0112-2022-03-03","title":"0.1.12 (2022-03-03)","text":"TypeDescriptionPRIssuesAuthor Fix  catch potential `nr.util.git.NoCurrentBranchError` in `novella.repository.detect_repository()`@NiklasRosenstein Improvement  add `novella --version` flag@NiklasRosenstein"},{"location":"changelog/#0111-2022-03-02","title":"0.1.11 (2022-03-02)","text":"TypeDescriptionPRIssuesAuthor Fix  `@anchor` now only specifies the URL fragment if the link target is in the same page@NiklasRosenstein Improvement  options are now added to their own argument group if registered by a template@NiklasRosenstein Feature  add `Action.setup()` which gives it access to the build context@NiklasRosenstein Feature  `NovellaContext.action()` now accepts an `Action` instance as well@NiklasRosenstein Improvement  `copy-files` action now always ignores files or directories named `.git`@NiklasRosenstein Feature  add a basic implementation for a Hugo template (https://gohugo.io/)@NiklasRosenstein Fix  fix replacing escaped tags@NiklasRosenstein Feature  add `metavar` argument to `NovellaContext.option()`@NiklasRosenstein Feature  add `--build-dir` option to MkDocs template4@NiklasRosenstein"},{"location":"changelog/#0110-2022-03-01","title":"0.1.10 (2022-03-01)","text":"TypeDescriptionPRIssuesAuthor Improvement  improve replacing escaped Novella tags in `MarkdownPreprocessorAction`@NiklasRosenstein Hygiene  `MkdocsTemplate` no longer stores actions it creates a members, you should access them using `NovellaContext.action()`@NiklasRosenstein"},{"location":"changelog/#019-2022-02-28","title":"0.1.9 (2022-02-28)","text":"TypeDescriptionPRIssuesAuthor Improvement  add `novella.graph` module, `Action` is no a subclass of `novella.graph.Node`@NiklasRosenstein Improvement  `NovellaContext.options` now throws an `AssertionError` if accessed before `NovellaContext.configure()` is called@NiklasRosenstein Improvement  `MarkdownProcessorAction` now stores processors internally in a graph as well, and `MarkdownProcessor` is now a subclass of `novella.graph.Node`. This allows processors to express dependencies on other processors.@NiklasRosenstein Improvement  `@cat` preprocessor now repeats preprocessing on the included content before injecting it@NiklasRosenstein Breaking change  remove `AnchorAndLinkRenderer` interface and use `MarkdownFlavor` instead, remove `Link` class and add `always_render_anchor_elements` option to `AnchorTagPreprocessor`. `MarkdownPreprocessorAction` now sets up `@shell`, `@cat` and `@anchor` by default. Add `MarkdownPreprocessor.setup()`@NiklasRosenstein Breaking change  `MkdocsTemplate` now keeps the created actions as attributes so they can be configured indivudally@NiklasRosenstein Feature  add `NovellaContext.delay()`@NiklasRosenstein Breaking change  add `Template.__init__()`@NiklasRosenstein"},{"location":"changelog/#018-2022-02-27","title":"0.1.8 (2022-02-27)","text":"TypeDescriptionPRIssuesAuthor Improvement  support for Python 3.8+ (before was 3.10)@NiklasRosenstein"},{"location":"changelog/#017-2022-02-27","title":"0.1.7 (2022-02-27)","text":"TypeDescriptionPRIssuesAuthor Improvement  sluggify anchor HTML ID for the @anchor flavor provided by the `mkdocs` template using `markdown.extensions.toc.slugify()`3@NiklasRosenstein Feature  add `--intercept` and `--intercept-log` options to CLI@NiklasRosenstein Breaking change  Split up responsibilities of `Novella` class between `Novella`, `NovellaContext` and `BuildContext`@NiklasRosenstein Feature  add `-r, --use-reloader` option to CLI@NiklasRosenstein Feature  add `--dot` option to CLI@NiklasRosenstein Feature  add `-c,--config-file` option@NiklasRosenstein Fix  fix `-h,--help` when no Novella build script is available in the current directory@NiklasRosenstein Hygiene  cleanup build logic@NiklasRosenstein Improvement  `@cat` tag registers reference file to be watched for changes@NiklasRosenstein Improvement  add `MkdocsUpdateConfigAction.upadte()` and `.update_with()`, update MkDocs config template to add Material features@NiklasRosenstein"},{"location":"changelog/#016-2022-02-24","title":"0.1.6 (2022-02-24)","text":"TypeDescriptionPRIssuesAuthor Improvement  enable `admonition` extension in MkDocs config template@NiklasRosenstein Feature  add `novella.repository` module@NiklasRosenstein"},{"location":"changelog/#015-2022-02-24","title":"0.1.5 (2022-02-24)","text":"TypeDescriptionPRIssuesAuthor Improvement  `@shell` inline tag strips output@NiklasRosenstein"},{"location":"changelog/#014-2022-02-24","title":"0.1.4 (2022-02-24)","text":"TypeDescriptionPRIssuesAuthor Improvement  `@shell` tag can now be used inline@NiklasRosenstein"},{"location":"changelog/#013-2022-02-23","title":"0.1.3 (2022-02-23)","text":"TypeDescriptionPRIssuesAuthor Fix  fix return code when an error is encountered in the pipeline@NiklasRosenstein"},{"location":"changelog/#012-2022-02-22","title":"0.1.2 (2022-02-22)","text":"TypeDescriptionPRIssuesAuthor Breaking change  rename `MkdocsTemplate.apply_default_config` to `~.apply_config`, make adding of `mkdocs-update-config` action unconditional and allow updating the MkDocs site name seperate from applying the default config@NiklasRosenstein Feature  implement automatic detection of Git repository URL and current branch name to inject MkDocs `repo_url` and `edit_uri` settings1@NiklasRosenstein Hygiene  downgrade minimum pyyaml dependency requirement (`&gt;=4.0`)@NiklasRosenstein"},{"location":"changelog/#011-2022-02-22","title":"0.1.1 (2022-02-22)","text":"TypeDescriptionPRIssuesAuthor Feature  support `slice_lines` option for `@cat` tag@NiklasRosenstein Docs  include Mkdocs default configuration delivered with Novella in `MkdocsApplDefaultAction` docstring@NiklasRosenstein Feature  implement `@shell` tag preprocessor@NiklasRosenstein"},{"location":"concepts/","title":"Concepts","text":"<p>There are three relevant concepts for the configuration that are provided by Novella itself:</p> <ol> <li>Options</li> <li>Actions</li> <li>Templates</li> <li>Build process</li> </ol> <p></p>"},{"location":"concepts/#options","title":"Options","text":"<p>An option is defined using the <code>NovellaContext.option()</code> function and allows you to define a command-line option that is parsed by Novella when running your build script.</p> <pre><code>option\n  \"site_directory\" \"d\"\n  description: \"The directory in which to generate the final HTML.\"\n  default: \"_site\"\n</code></pre> <p></p>"},{"location":"concepts/#actions","title":"Actions","text":"<p>Actions are plugins that execute some logic when its their turn and are declared using the <code>NovellaContext.do()</code> function. Inside the configuration closure of actions, the <code>NovellaContext.options</code> dictionary can be used to read option values that have been passed via the CLI.</p> <pre><code>do \"copy-files\" {\n  paths = [ \"content\", \"mkdocs.yml\" ]\n}\n</code></pre> <p>Every action has a name, and by default that name will be the name of the action type ID that is the first argument to the <code>do()</code> method. You can override this name using the <code>name</code> keyword argument. The name can be used to access the action at a later point in the build script using the <code>NovellaContext.action()</code> method.</p> <pre><code>template \"mkdocs\"\n\naction \"preprocess-markdown\" {  # This action was created by the mkdocs template\n  use \"pydoc\"  # Make use of the pydoc preprocessor plugin (note: requires Pydoc-Markdown)\n}\n</code></pre> <p>Note</p> <p>New actions can be implemented using the <code>novella.action.Action</code> base class and registering the subclass under the <code>novella.actions</code> entrypoint.</p> <p>Users can also create action logic on-the-fly by passing a closure to the <code>do()</code> method instead of an action ID. The dependencies of the action can be managed from the configuration closure. Actions created this way need to have a <code>name</code> set explicitly.</p> <pre><code># ...\n\ndef api_pages = {\n  \"Configuration\": \"my_package.config\",\n  \"Client\": \"my_package.client\",\n}\n\n# Generate some files in the build directory (here by the variable \"directory\" which is available\n# through the Novella build context exposed in the action closure).\ndo\n  name: \"generate-api-pages\"\n  closure: {\n    precedes \"preprocess-markdown\"\n  }\n  action: {\n    for title, package in api_pages.items():\n      def filename = directory / 'content' / 'api' / (package + '.md')\n      filename.parent.mkdir(parents=True, exist_ok=True)\n      filename.write_text('---\\ntitle: {}\\n---\\n@pydoc {}\\n'.format(title, package))\n  }\n</code></pre> <p></p>"},{"location":"concepts/#templates","title":"Templates","text":"<p>A template is a plugin that takes over definition of the Novella pipeline to avoid some boilerplate in your configuration script. Templates are invoked via the <code>NovellaContext.template()</code> function and can also be configured using \"init\" and \"post\" closures (before the template is executed and after, respectively). Novella itself delivers an <code>mkdocs</code> template out of the box.</p> <pre><code>template \"mkdocs\"\n\naction \"mkdocs-update-config\" {\n  apply_defaults = False\n}\n</code></pre> <p>Note</p> <p>New templates can be implemented using the <code>novella.template.Template</code> base class and registering the subclass under the <code>novella.templates</code> entrypoint.</p> <p></p>"},{"location":"concepts/#build-process","title":"Build process","text":"<p>Novella is intended as a build system for processing (i.e. updating) existing files. In order to not modify any original files, every build is executed in a temporary build directory that the required files are copied to using the <code>copy-files</code> action. This should remind you of Docker builds, where files are copied into the build container using the <code>ADD</code> or <code>COPY</code> commands, only that Novella obviously is not running in as an isolated environment.</p> <pre><code>do \"copy-files\" {\n  paths = [ 'content/' ]\n}\n</code></pre> <p>The paths here will be watched for changes, allowing Novella to restart the pipeline if that feature is enabled (either by passing the <code>-r,--use-reloader</code> option or if any action supports reloading (like the action that runs MkDocs in the <code>mkdocs</code> template).</p>"},{"location":"components/Preprocessors/anchor/","title":"@anchor and {@link}","text":"<p>This built-in tag preprocessor provides the <code>@anchor</code> and <code>{@link}</code> tags that can be used to mark locations in a Markdown file and link to them across files.</p>"},{"location":"components/Preprocessors/anchor/#anchor","title":"<code>@anchor</code>","text":"<p>Arguments</p> <pre><code>@anchor &lt;anchor_id&gt; [&lt;name&gt;]\n</code></pre> <p>Example</p> <pre><code>@anchor examples\n# Examples\n</code></pre>"},{"location":"components/Preprocessors/anchor/#link","title":"<code>{@link}</code>","text":"<p>The <code>{@link}</code> inline tag is used to link to an anchor, potentially from another page. The anchor name is placed as the name of the link, unless overwritten via the settings or the second link argument.</p> <p>Arguments</p> <pre><code>{@link &lt;anchor_id&gt; [&lt;text&gt;]}\n</code></pre> <p>Example</p> <pre><code>Check out the {@link examples}. Also check out the {@link faq FAQ}.\n</code></pre>"},{"location":"components/Preprocessors/cat/","title":"<code>@cat</code>","text":"<p>This tag can be used to reference the content of another file relative to the current file in the project directory or relative to the project root (i.e. where the <code>build.novella</code> file is located) using an absolute path.</p> <p>Arguments</p> <pre><code>@cat &lt;file&gt; [:with &lt;toml&gt;]\n</code></pre> <p>Example</p> <pre><code>@cat ../../../readme.md\n@cat /../readme.md :with slice_lines = \"3:\"\n</code></pre> <p>Settings</p> <ul> <li><code>slice_lines</code> (str) \u2013 A slice indicator that is applied to lines in the referenced file.</li> </ul>"},{"location":"components/actions/","title":"Action","text":""},{"location":"components/actions/#class-action","title":"Class Action","text":"<pre><code>class Action(Node['Action'])\n</code></pre> <p>[view_source]</p> <p>Base class for actions that can be embedded in a Novella pipeline.</p> <p></p> <p></p>"},{"location":"components/actions/#context","title":"context","text":"<p>The instance of the Novella application object that controls the pipeline and lifecycle of the build process. This is set when the action is added to the pipeline and is always available when execute() is called.</p> <p></p> <p></p>"},{"location":"components/actions/#callsite","title":"callsite","text":"<p>The callsite at which the action was created.</p> <p></p> <p></p>"},{"location":"components/actions/#supports_reloading","title":"supports_reloading","text":"<p>Set to True to indicate that the action supports content reloading while it is running. This is relevant for actions that trigger static site generators serving content that already have automatic reloading capabilities as this will tell Novella to not kill the action and instead rerun the parts of the pipeline that came before it.</p> <p></p> <p></p>"},{"location":"components/actions/#__post_init__","title":"__post_init__","text":"<pre><code>def __post_init__() -&gt; None\n</code></pre> <p>[view_source]</p> <p>Called from <code>__init__()</code>. Can be overwritten by subclasses to avoid having to overload the constructor.</p> <p></p> <p></p>"},{"location":"components/actions/#get_description","title":"get_description","text":"<pre><code>def get_description() -&gt; str | None\n</code></pre> <p>[view_source]</p> <p>Return a short text description of the action. It may be shown while the action is running to information the user of what is currently happening.</p> <p></p> <p></p>"},{"location":"components/actions/#setup","title":"setup","text":"<pre><code>def setup(build: BuildContext) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Called before configuration closures when the build context is ready.</p> <p></p> <p></p>"},{"location":"components/actions/#execute","title":"execute","text":"<pre><code>@abc.abstractmethod\ndef execute(build: BuildContext) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Execute the action.</p>"},{"location":"components/actions/copy_files/","title":"Copy files","text":""},{"location":"components/actions/copy_files/#class-copyfilesaction","title":"Class CopyFilesAction","text":"<pre><code>class CopyFilesAction(Action)\n</code></pre> <p>[view_source]</p> <p>An action to copy files from the project root to the build directory. This is usually the first step in a pipeline as further steps can then freely modify files in the build directory without affecting the original project directory.</p> <p>This action is registered as an action plugin under the name <code>copy-files</code>.</p> <p></p> <p></p>"},{"location":"components/actions/copy_files/#paths","title":"paths","text":"<p>The list of paths, relative to the project directory, to copy to the temporary build directory.</p>"},{"location":"components/actions/preprocess_markdown/","title":"Preprocess markdown","text":"<p>Novella provides built-in Markdown preprocessing functionality to replace tags with automatically generated content. Tags are either specified as their own block written as <code>@tag &lt;args&gt;</code> or inline as <code>{@link &lt;args&gt;}</code>. Block tags can span multiple lines if the following lines are indented. Tags may have a TOML configuration following the keyword <code>:with</code>.</p> build.novella<pre><code>do \"preprocess-markdown\" {\n  path = \"content/\"\n  use \"pydoc\"  # Requires Pydoc-Markdown (see https://github.com/NiklasRosenstein/pydoc-markdown)\n}\n</code></pre> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#class-markdownpreprocessoraction","title":"Class MarkdownPreprocessorAction","text":"<pre><code>class MarkdownPreprocessorAction(Action)\n</code></pre> <p>[view_source]</p> <p>An action to preprocess Markdown files. All functionality of the processor is implemented by plugins that implement the MarkdownPreprocessor interface. The order of execution of the processors is based on their dependencies, much like when Actions are executed.</p> <p>As a final step, the processor will process escaped inline tags (i.e. replacing <code>{@</code> with <code>@{</code>).</p> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#path","title":"path","text":"<p>The path to the folder in which markdown files should be preprocessed. If this is not set, all Markdown files in the build directory will be preprocessed.</p> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#encoding","title":"encoding","text":"<p>The encoding to read and write files as.</p> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#use","title":"use","text":"<pre><code>def use(processor: str | MarkdownPreprocessor,\n        closure: _Closure | None = None,\n        name: str | None = None) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Register a processor for use in the plugin.</p> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#preprocessor","title":"preprocessor","text":"<pre><code>def preprocessor(processor_name: str,\n                 closure: _Closure | None = None) -&gt; MarkdownPreprocessor\n</code></pre> <p>[view_source]</p> <p>Access or reconfigure a markdown processor that is already registered.</p> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#repeat","title":"repeat","text":"<pre><code>def repeat(path: Path,\n           output_path: Path,\n           content: str,\n           source_path: Path | None = None,\n           last_processor: MarkdownPreprocessor | None = None) -&gt; str\n</code></pre> <p>[view_source]</p> <p>Repeat all processors that have been processed so far on the given files. This is used by the <code>@cat</code> preprocessor to apply all preprocessors previously run on the newly included content. This does not include the processor that this method is called from, but only the preprocessors that preceded it. The caller may pass itself to the last_processor argument to include themselves.</p> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#execute","title":"execute","text":"<pre><code>def execute(build: BuildContext) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Execute the preprocessor on all Markdown files specified in path.</p> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#class-markdownpreprocessor","title":"Class MarkdownPreprocessor","text":"<pre><code>class MarkdownPreprocessor(Node['MarkdownPreprocessor'])\n</code></pre> <p>[view_source]</p> <p>Interface for plugins to process markdown files.</p> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#entrypoint","title":"ENTRYPOINT","text":"<p>The entrypoint under which preprocessor plugins must be registered.</p> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#setup","title":"setup","text":"<pre><code>def setup() -&gt; None\n</code></pre> <p>[view_source]</p> <p>Called before the execution order of processors is determined.</p> <p></p> <p></p>"},{"location":"components/actions/preprocess_markdown/#process_files","title":"process_files","text":"<pre><code>@abc.abstractmethod\ndef process_files(files: MarkdownFiles) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Process the file contents in files.</p>"},{"location":"components/actions/run/","title":"Run","text":""},{"location":"components/actions/run/#class-runaction","title":"Class RunAction","text":"<pre><code>class RunAction(Action)\n</code></pre> <p>[view_source]</p> <p>An action to run a command on the command-line. Often times this will be the last step in a pipeline to kick off some external tool after all pre-processing steps are completed.</p> <p>This action is registered as an action plugin under the name <code>run</code>.</p> <p></p> <p></p>"},{"location":"components/actions/run/#args","title":"args","text":"<p>A list of the arguments to run. Only a single command can be run using this action.</p>"},{"location":"components/templates_/","title":"Template","text":""},{"location":"components/templates_/#class-template","title":"Class Template","text":"<pre><code>class Template(abc.ABC)\n</code></pre> <p>[view_source]</p> <p>A template represents a codified sequence of actions that can be further customized, with the intent to reduce the boilerplate of the <code>build.novella</code> file.</p> <p></p> <p></p>"},{"location":"components/templates_/#setup","title":"setup","text":"<pre><code>def setup(context: NovellaContext) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Called before the <code>pre</code> closure in {@link pydoc:novella.novella.NovellaContext.template}.</p> <p></p> <p></p>"},{"location":"components/templates_/#define_pipeline","title":"define_pipeline","text":"<pre><code>def define_pipeline(context: NovellaContext) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Called between the <code>pre</code> and <code>post</code> closure in {@link pydoc:novella.novella.NovellaContext.template}.</p>"},{"location":"components/templates_/hugo/","title":"Hugo","text":""},{"location":"components/templates_/hugo/#class-hugotemplate","title":"Class HugoTemplate","text":"<pre><code>class HugoTemplate(Template)\n</code></pre> <p>[view_source]</p> <p></p> <p></p>"},{"location":"components/templates_/hugo/#content_directory","title":"content_directory","text":"<p>The directory that contains the Hugo documentation source code content. Defaults to <code>content/</code>.</p> <p></p> <p></p>"},{"location":"components/templates_/hugo/#hugo_directory","title":"hugo_directory","text":"<p>The directory that contains all the Hugo content. This directory should contain the content_directory. Defaults to <code>./</code>, i.e. the same directory where the Novella build file is located. All files in this directory except for the content_directory will be linked into the build directory.</p> <p></p> <p></p>"},{"location":"components/templates_/hugo/#class-installhugoaction","title":"Class InstallHugoAction","text":"<pre><code>class InstallHugoAction(Action)\n</code></pre> <p>[view_source]</p> <p>Action to install Hugo into the build directory if it is not available on the system.</p>"},{"location":"components/templates_/mkdocs/","title":"Mkdocs","text":""},{"location":"components/templates_/mkdocs/#class-mkdocstemplate","title":"Class MkdocsTemplate","text":"<pre><code>class MkdocsTemplate(Template)\n</code></pre> <p>[view_source]</p> <p>A template to bootstrap an MkDocs build using Novella. It will set up actions to copy files from the content_directory and the <code>mkdocs.yml</code> config relative to the Novella configuration file (if the configuration file exists).</p> <p>This template registers the following options:</p> <p>--serve         Use mkdocs serve --port          The port to serve under (defaults to 8000). --site-dir      Build directory for MkDocs (defaults to \"_site\") --base-url      The base URL to prefix to autogenerated link inside the documentation.</p> <p>This template produces the following actions:</p> <ol> <li><code>copy-files</code> \u2013 A CopyFilesAction that copies the content_directory and the <code>mkdocs.yml</code> (if it exists) to the build directory.</li> <li><code>mkdocs-update-config</code> \u2013 A <code>MkdocsApplyDefaultAction</code> to create or update the MkDocs configuraton file.</li> <li><code>preprocess-markdown</code> \u2013 An instance of the MarkdownPreprocessorAction. i. {@link pydoc:novella.markdown.tags.anchor.AnchorTagProcessor.flavor} is set to an {@link pydoc:novella.markdown.flavor.MkDocsFlavor} instance, and the prefix is set to base_url.</li> <li><code>mkdocs-run</code> \u2013 A RunAction that invokes MkDocs.</li> </ol> <p>If the <code>--serve</code> option is provided, the template enables file watching for everything copied by the <code>copy-files</code> action and marks the <code>mkdocs-run</code> as reload-capable, allowing for a seemless live editing experience while using Novella as a preprocessor.</p> <p>Example:</p> <pre><code>template \"mkdocs\"\n\naction \"mkdocs-update-config\" {\n  site_name = \"My documentation\"\n}\n\naction \"preprocess-markdown\" {\n  use \"pydoc\"\n}\n</code></pre> <p></p> <p></p>"},{"location":"components/templates_/mkdocs/#content_directory","title":"content_directory","text":"<p>The directory that contains the MkDocs context. Defaults to <code>content/</code>.</p> <p></p> <p></p>"},{"location":"components/templates_/mkdocs/#base_url","title":"base_url","text":"<p>The base URL at which the documentation will be hosted.</p> <p></p> <p></p>"},{"location":"components/templates_/mkdocs/#class-mkdocsupdateconfigaction","title":"Class MkdocsUpdateConfigAction","text":"<pre><code>class MkdocsUpdateConfigAction(Action)\n</code></pre> <p>[view_source]</p> <p>An action to update the MkDocs configuration file, or create one if the user did not provide it.</p> <p>The following configuration serves as the default configuration if the user did not provide an MkDocs configuration of their own. If a configuration file is already present, it will be updated such that top-level keys that don't exist in the provided configuration are set to the one present in the default below.</p> <p>To disable this behaviour, set apply_defaults to <code>False</code>.</p> <p>Available default profiles:</p> MaterialReadthedocs <pre><code>docs_dir: content\nsite_name: My documentation\ntheme:\nname: material\nfeatures:\n- navigation.indexes\n- navigation.instant\n- navigation.sections\n- navigation.tracking\n- navigation.top\n- toc.follow\nmarkdown_extensions:\n- admonition\n- markdown.extensions.extra\n- meta\n- pymdownx.betterem\n- pymdownx.caret\n- pymdownx.details\n- pymdownx.highlight\n- pymdownx.inlinehilite\n- pymdownx.keys\n- pymdownx.mark\n- pymdownx.smartsymbols\n- pymdownx.superfences\n- pymdownx.tabbed: { alternate_style: true }\n- pymdownx.tasklist: { custom_checkbox: true }\n- pymdownx.tilde\n</code></pre> <pre><code>docs_dir: content\nsite_name: My documentation\ntheme:\nname: readthedocs\nhighlightjs: true\nhljs_languages:\n- python\n- toml\n- yaml\ninclude_homepage_in_sidebar: true\nsticky_navigation: true\nmarkdown_extensions:\n- admonition\n- markdown.extensions.extra\n- meta\n</code></pre> <p>Check out the the Material for MkDocs // Setup documentation for more information. Other common theme features to enable are <code>toc.integrate</code> and <code>navigation.tabs</code>.</p> <p></p> <p></p>"},{"location":"components/templates_/mkdocs/#apply_defaults","title":"apply_defaults","text":"<p>Whether to apply the template to the MkDocs configuration (shown above).</p> <p>Deprecated; use profile instead.</p> <p></p> <p></p>"},{"location":"components/templates_/mkdocs/#profile","title":"profile","text":"<p>The configuration profile to apply. Set to <code>None</code> to not update the MkDocs config.</p> <p></p> <p></p>"},{"location":"components/templates_/mkdocs/#site_name","title":"site_name","text":"<p>The MkDocs <code>site_name</code> to inject. Will override an existing site name if not present in the MkDocs configuration.</p> <p></p> <p></p>"},{"location":"components/templates_/mkdocs/#autodetect_repo_url","title":"autodetect_repo_url","text":"<p>Whether to autodetect the Git repository URL and inject it into the MkDocs configuration. Enabled by default. If the repository URL is already configured, it will do nothing.</p> <p></p> <p></p>"},{"location":"components/templates_/mkdocs/#content_directory_1","title":"content_directory","text":"<p>The content directory that contains the MkDocs source files. This is used only to construct the edit URI if autodetect_repo_url is enabled. This passed through by the MkdocsTemplate automatically.</p> <p></p> <p></p>"},{"location":"components/templates_/mkdocs/#update","title":"update","text":"<pre><code>def update(json_path: str,\n           *,\n           add: t.Any = NotSet.Value,\n           set: t.Any = NotSet.Value,\n           do: t.Callable[[t.Any], t.Any] | None = None) -&gt; None\n</code></pre> <p>[view_source]</p> <p>A helper function to update a value in the MkDocs configuration by either setting it to the value specified to the set argument or by adding to it (e.g. updating it if it is a dictionary or summing them in case of other values like strings or lists) the value of add. The do operation can also be used to perform an action on the existing value at json_path, but the value must be directly mutated and already exist in the configuration.</p> <p>Note that the json_path argument is treated very simplisticly and does not support wildcards or indexing. The string must begin with <code>$</code>. Quotes in keys are not supported either.</p> <p>Example</p> <pre><code>template \"mkdocs\"\n\naction \"mkdocs-update-config\" {\n  site_name = \"My documentation\"\n  update '$.theme.features' add: ['toc.integrate', 'navigation.tabs']\n  update '$.theme.palette' set: {'primary': 'black', 'accent': 'amber'}\n}\n</code></pre> <p></p> <p></p>"},{"location":"components/templates_/mkdocs/#update_with","title":"update_with","text":"<pre><code>def update_with(func: t.Callable[[dict[str, t.Any]], t.Any]) -&gt; None\n</code></pre> <p>[view_source]</p> <p>Adds a callback that can modify the MkDocs config before it is updated.</p>"},{"location":"guides/github/","title":"Using Novella on GitHub","text":"<p>This guide is intended to give you a quick introduction on how to build your project documentation using Novella on GitHub using Actions and publish them to Pages. It should also serve as a reference point to quickly get boilerplate configuration for this type of workflow.</p>"},{"location":"guides/github/#project-structure","title":"Project structure","text":"<p>Here we are going that you are building documentation for a Python project and that your structure looks similar to the below:</p> <pre><code>.github/\n  workflows/\n    python.yml\ndocs/\n  content/\n    index.md\n    changelog.md\n    etc.md\n  build.novella\n  requirements.txt\n# ...\n</code></pre>"},{"location":"guides/github/#requirements","title":"Requirements","text":"<p>It is convenient to have the requirements for building the documentation in a <code>docs/requirements.txt</code> file as that means your job does not need to rely on another external tool other than Pip to install your tools.</p> docs/requirements.txt<pre><code>mkdocs\nmkdocs-material\nnovella==1.1.1\n</code></pre>"},{"location":"guides/github/#github-action","title":"GitHub Action","text":""},{"location":"guides/github/#test-and-build-in-one-job","title":"Test and build in one job","text":"<p>In some cases it is convenient to build the documentation in the same job as where tests are run. But if your Python project needs to be tested with versions of the Python that Novella or other tooling is not compatible with, you need to make sure you install the tooling into an appropriate Python version instead. You can actually run the <code>actions/setup-python@v2</code> action multiple times in the same job.</p> <pre><code>jobs:\ntest:\nsteps:\n\n- uses: actions/checkout@v2\n\n- name: Set up Python 3.10\nuses: actions/setup-python@v2\nwith: { python-version: \"3.10\" }\n\n- name: Install tooling\nrun: python -m venv .tooling &amp;&amp; .tooling/bin/pip install -r docs/requirements.txt\n\n- name: Set up Python ${{ matrix.python-version }}\nuses: actions/setup-python@v2\nwith: { python-version: \"${{ matrix.python-version }}\" }\n\n- name: Install project\nrun: pip install .\n\n# ...\n\n- name: Build documentation\nrun: cd docs &amp;&amp; ../.tooling/bin/novella\n\n# ...\n</code></pre>"},{"location":"guides/github/#build-in-a-separate-job","title":"Build in a separate job","text":"<p>Building the documentation completely isolated from other CI jobs is often preferred.</p> <pre><code>jobs:\ndocs:\nruns-on: ubuntu-latest\nsteps:\n\n- uses: actions/checkout@v2\n\n- name: Set up Python 3.10\nuses: actions/setup-python@v2\nwith: { python-version: \"3.10\" }\n\n- name: Install dependencies\nrun: pip install -r docs/requirements.txt\n\n- name: Build documentation\nrun: cd docs &amp;&amp; novella\n\n# ...\n</code></pre>"},{"location":"guides/github/#publish-the-documentation","title":"Publish the documentation","text":"<p>Having a separate job for publishing the docs is nice because it allows you to build the documentation in parallel to other CI jobs such as tests and static type checks, while only publishing it if the tests succeed. For this, upload the documentation output as an artifact in your <code>docs</code> job:</p> <pre><code>jobs:\ndocs:\n# ... (see above)\n\n- uses: actions/upload-artifact@v2\nwith:\nname: docs\npath: docs/_site\n</code></pre> <p>Then in a new job, publish the documentation:</p> <pre><code>jobs:\ndocs-publish:\nneeds: [ \"test\", \"docs\" ]\nruns-on: ubuntu-latest\nsteps:\n\n- uses: actions/checkout@v2\n\n- uses: actions/download-artifact@v2\nwith:\nname: docs\npath: docs/_site\n\n- name: Publish docs\nuses: JamesIves/github-pages-deploy-action@4.1.4\nwith:\nbranch: gh-pages\nfolder: docs/_site\nssh-key: ${{ secrets.DEPLOY_KEY }}\n</code></pre>"}]}